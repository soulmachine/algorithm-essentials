"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[9971],{87730:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dfs/palindrome-partitioning","title":"Palindrome Partitioning","description":"\u63cf\u8ff0","source":"@site/docs/dfs/palindrome-partitioning.md","sourceDirName":"dfs","slug":"/dfs/palindrome-partitioning","permalink":"/en/dfs/palindrome-partitioning","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Palindrome Partitioning"},"sidebar":"docs","previous":{"title":"Additive Number","permalink":"/en/dfs/additive-number"},"next":{"title":"Unique Paths","permalink":"/en/dfs/unique-paths"}}');var r=e(74848),a=e(28453),i=e(11470),l=e(19365);const o={title:"Palindrome Partitioning"},c=void 0,u={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6df1\u641c 1",id:"\u6df1\u641c-1",level:3},{value:"\u6df1\u641c 2",id:"\u6df1\u641c-2",level:3},{value:"\u52a8\u89c4",id:"\u52a8\u89c4",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function p(n){const t={a:"a",annotation:"annotation",code:"code",h3:"h3",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,r.jsx)(t.p,{children:"Given a string s, partition s such that every substring of the partition is a palindrome."}),"\n",(0,r.jsx)(t.p,{children:"Return all possible palindrome partitioning of s."}),"\n",(0,r.jsxs)(t.p,{children:["For example, given ",(0,r.jsx)(t.code,{children:'s = "aab"'}),",\nReturn"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'  [\n    ["aa","b"],\n    ["a","a","b"]\n  ]\n'})}),"\n",(0,r.jsx)(t.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,r.jsx)(t.p,{children:"\u5728\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u5224\u65ad\u4e2d\u95f4\u7ed3\u679c\u662f\u5426\u4e3a\u5408\u6cd5\u7ed3\u679c\uff0c\u7528\u56de\u6eaf\u6cd5\u3002"}),"\n",(0,r.jsxs)(t.p,{children:["\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32\uff0c\u6709",(0,r.jsx)(t.code,{children:"n-1"}),"\u4e2a\u5730\u65b9\u53ef\u4ee5\u780d\u65ad\uff0c\u6bcf\u4e2a\u5730\u65b9\u53ef\u65ad\u53ef\u4e0d\u65ad\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4e3a",(0,r.jsxs)(t.span,{className:"katex",children:[(0,r.jsx)(t.span,{className:"katex-mathml",children:(0,r.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(t.semantics,{children:[(0,r.jsxs)(t.mrow,{children:[(0,r.jsx)(t.mi,{children:"O"}),(0,r.jsx)(t.mo,{stretchy:"false",children:"("}),(0,r.jsxs)(t.msup,{children:[(0,r.jsx)(t.mn,{children:"2"}),(0,r.jsxs)(t.mrow,{children:[(0,r.jsx)(t.mi,{children:"n"}),(0,r.jsx)(t.mo,{children:"\u2212"}),(0,r.jsx)(t.mn,{children:"1"})]})]}),(0,r.jsx)(t.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(t.annotation,{encoding:"application/x-tex",children:"O(2^{n-1})"})]})})}),(0,r.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(t.span,{className:"base",children:[(0,r.jsx)(t.span,{className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,r.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(t.span,{className:"mopen",children:"("}),(0,r.jsxs)(t.span,{className:"mord",children:[(0,r.jsx)(t.span,{className:"mord",children:"2"}),(0,r.jsx)(t.span,{className:"msupsub",children:(0,r.jsx)(t.span,{className:"vlist-t",children:(0,r.jsx)(t.span,{className:"vlist-r",children:(0,r.jsx)(t.span,{className:"vlist",style:{height:"0.8141em"},children:(0,r.jsxs)(t.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,r.jsx)(t.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(t.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsxs)(t.span,{className:"mord mtight",children:[(0,r.jsx)(t.span,{className:"mord mathnormal mtight",children:"n"}),(0,r.jsx)(t.span,{className:"mbin mtight",children:"\u2212"}),(0,r.jsx)(t.span,{className:"mord mtight",children:"1"})]})})]})})})})})]}),(0,r.jsx)(t.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"\u6df1\u641c-1",children:"\u6df1\u641c 1"}),"\n","\n",(0,r.jsxs)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(l.A,{value:"java",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>(); // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int prev, int start) {\n        if (start == s.length()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.add(s.substring(prev, start));\n                result.add(new ArrayList<>(path));\n                path.remove(path.size() - 1);\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.add(s.substring(prev, start));\n            dfs(s, path, result, start, start + 1);\n            path.remove(path.size() - 1);\n        }\n    }\n\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"cpp",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0, 1);\n        return result;\n    }\n\n    // prev \u8868\u793a\u524d\u4e00\u4e2a\u9694\u677f, start \u8868\u793a\u5f53\u524d\u9694\u677f\n    void dfs(string &s, vector<string>& path,\n            vector<vector<string>> &result, size_t prev, size_t start) {\n        if (start == s.size()) { // \u6700\u540e\u4e00\u4e2a\u9694\u677f\n            if (isPalindrome(s, prev, start - 1)) { // \u5fc5\u987b\u4f7f\u7528\n                path.push_back(s.substr(prev, start - prev));\n                result.push_back(path);\n                path.pop_back();\n            }\n            return;\n        }\n        // \u4e0d\u65ad\u5f00\n        dfs(s, path, result, prev, start + 1);\n        // \u5982\u679c[prev, start-1] \u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u65ad\u5f00\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00\uff08\u4e0a\u4e00\u884c\u5df2\u7ecf\u505a\u4e86\uff09\n        if (isPalindrome(s, prev, start - 1)) {\n            // \u65ad\u5f00\n            path.push_back(s.substr(prev, start - prev));\n            dfs(s, path, result, start, start + 1);\n            path.pop_back();\n        }\n    }\n\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"\u6df1\u641c-2",children:"\u6df1\u641c 2"}),"\n",(0,r.jsx)(t.p,{children:"\u53e6\u4e00\u79cd\u5199\u6cd5\uff0c\u66f4\u52a0\u7b80\u6d01\u3002\u8fd9\u79cd\u5199\u6cd5\u4e5f\u5728 Combination Sum, Combination Sum II \u4e2d\u51fa\u73b0\u8fc7\u3002"}),"\n",(0,r.jsxs)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(l.A,{value:"java",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> result = new ArrayList<>();\n        List<String> path = new ArrayList<>();  // \u4e00\u4e2apartition\u65b9\u6848\n        dfs(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    private static void dfs(String s, List<String> path,\n                            List<List<String>> result, int start) {\n        if (start == s.length()) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < s.length(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.add(s.substring(start, i+1));\n                dfs(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.remove(path.size() - 1); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    private static boolean isPalindrome(String s, int start, int end) {\n        while (start < end && s.charAt(start) == s.charAt(end)) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"cpp",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"// Palindrome Partitioning\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> path;  // \u4e00\u4e2apartition\u65b9\u6848\n        DFS(s, path, result, 0);\n        return result;\n    }\n    // \u641c\u7d22\u5fc5\u987b\u4ee5s[start]\u5f00\u5934\u7684partition\u65b9\u6848\n    void DFS(string &s, vector<string>& path,\n            vector<vector<string>> &result, int start) {\n        if (start == s.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = start; i < s.size(); i++) {\n            if (isPalindrome(s, start, i)) { // \u4ecei\u4f4d\u7f6e\u780d\u4e00\u5200\n                path.push_back(s.substr(start, i - start + 1));\n                DFS(s, path, result, i + 1);  // \u7ee7\u7eed\u5f80\u4e0b\u780d\n                path.pop_back(); // \u64a4\u9500\u4e0a\u4e0a\u884c\n            }\n        }\n    }\n    bool isPalindrome(const string &s, int start, int end) {\n        while (start < end && s[start] == s[end]) {\n            ++start;\n            --end;\n        }\n        return start >= end;\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"\u52a8\u89c4",children:"\u52a8\u89c4"}),"\n",(0,r.jsxs)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(l.A,{value:"java",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<String>> partition(String s) {\n        final int n = s.length();\n        boolean[][] p = new boolean[n][n]; // whether s[i,j] is palindrome\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s.charAt(i) == s.charAt(j) &&\n                        ((j - i < 2) || p[i + 1][j - 1]);\n\n        List<List<String>>[] subPalins = new ArrayList[n]; // sub palindromes of s[0,i]\n        for (int i = 0; i < n; ++i) subPalins[i] = new ArrayList<>();\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    String palindrome = s.substring(i, j+1);\n                    if (j + 1 < n) {\n                        for (List<String> v : subPalins[j + 1]) {\n                            ArrayList<String> tmp = new ArrayList<>(v);\n                            tmp.add(0, palindrome);\n                            subPalins[i].add(tmp);\n                        }\n                    } else {\n                        ArrayList<String> tmp = new ArrayList<>();\n                        tmp.add(palindrome);\n                        subPalins[i].add(tmp);\n                    }\n                }\n        }\n        return subPalins[0];\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"cpp",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"// Palindrome Partitioning\n// \u52a8\u89c4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<string> > partition(string s) {\n        const int n = s.size();\n        bool p[n][n]; // whether s[i,j] is palindrome\n        fill_n(&p[0][0], n * n, false);\n        for (int i = n - 1; i >= 0; --i)\n            for (int j = i; j < n; ++j)\n                p[i][j] = s[i] == s[j] && ((j - i < 2) || p[i + 1][j - 1]);\n\n        vector<vector<string> > sub_palins[n]; // sub palindromes of s[0,i]\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i; j < n; ++j)\n                if (p[i][j]) {\n                    const string palindrome = s.substr(i, j - i + 1);\n                    if (j + 1 < n) {\n                        for (auto v : sub_palins[j + 1]) {\n                            v.insert(v.begin(), palindrome);\n                            sub_palins[i].push_back(v);\n                        }\n                    } else {\n                        sub_palins[i].push_back(vector<string> { palindrome });\n                    }\n                }\n        }\n        return sub_palins[0];\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(t.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/en/dp/palindrome-partitioning-ii",children:"Palindrome Partitioning II"})}),"\n"]})]})}function h(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},19365:(n,t,e)=>{e.d(t,{A:()=>i});e(96540);var s=e(34164);const r={tabItem:"tabItem_Ymn6"};var a=e(74848);function i(n){let{children:t,hidden:e,className:i}=n;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:e,children:t})}},11470:(n,t,e)=>{e.d(t,{A:()=>S});var s=e(96540),r=e(34164),a=e(23104),i=e(56347),l=e(205),o=e(57485),c=e(31682),u=e(70679);function d(n){return s.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:t}=n;return!!t&&"object"==typeof t&&"value"in t}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:t,children:e}=n;return(0,s.useMemo)((()=>{const n=t??function(n){return d(n).map((n=>{let{props:{value:t,label:e,attributes:s,default:r}}=n;return{value:t,label:e,attributes:s,default:r}}))}(e);return function(n){const t=(0,c.XI)(n,((n,t)=>n.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[t,e])}function h(n){let{value:t,tabValues:e}=n;return e.some((n=>n.value===t))}function m(n){let{queryString:t=!1,groupId:e}=n;const r=(0,i.W6)(),a=function(n){let{queryString:t=!1,groupId:e}=n;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:t,groupId:e});return[(0,o.aZ)(a),(0,s.useCallback)((n=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,n),r.replace({...r.location,search:t.toString()})}),[a,r])]}function v(n){const{defaultValue:t,queryString:e=!1,groupId:r}=n,a=p(n),[i,o]=(0,s.useState)((()=>function(n){let{defaultValue:t,tabValues:e}=n;if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=e.find((n=>n.default))??e[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:a}))),[c,d]=m({queryString:e,groupId:r}),[v,g]=function(n){let{groupId:t}=n;const e=function(n){return n?`docusaurus.tab.${n}`:null}(t),[r,a]=(0,u.Dv)(e);return[r,(0,s.useCallback)((n=>{e&&a.set(n)}),[e,a])]}({groupId:r}),f=(()=>{const n=c??v;return h({value:n,tabValues:a})?n:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((n=>{if(!h({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);o(n),d(n),g(n)}),[d,g,a]),tabValues:a}}var g=e(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=e(74848);function j(n){let{className:t,block:e,selectedValue:s,selectValue:i,tabValues:l}=n;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=n=>{const t=n.currentTarget,e=o.indexOf(t),r=l[e].value;r!==s&&(c(t),i(r))},d=n=>{let t=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const e=o.indexOf(n.currentTarget)+1;t=o[e]??o[0];break}case"ArrowLeft":{const e=o.indexOf(n.currentTarget)-1;t=o[e]??o[o.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":e},t),children:l.map((n=>{let{value:t,label:e,attributes:a}=n;return(0,b.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:n=>o.push(n),onKeyDown:d,onClick:u,...a,className:(0,r.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":s===t}),children:e??t},t)}))})}function x(n){let{lazy:t,children:e,selectedValue:a}=n;const i=(Array.isArray(e)?e:[e]).filter(Boolean);if(t){const n=i.find((n=>n.props.value===a));return n?(0,s.cloneElement)(n,{className:(0,r.A)("margin-top--md",n.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((n,t)=>(0,s.cloneElement)(n,{key:t,hidden:n.props.value!==a})))})}function w(n){const t=v(n);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(j,{...t,...n}),(0,b.jsx)(x,{...t,...n})]})}function S(n){const t=(0,g.A)();return(0,b.jsx)(w,{...n,children:d(n.children)},String(t))}},28453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>l});var s=e(96540);const r={},a=s.createContext(r);function i(n){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function l(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),s.createElement(a.Provider,{value:t},n.children)}}}]);