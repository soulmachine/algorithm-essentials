"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3072],{84422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"graph/ufs/number-of-provinces","title":"Number of Provinces","description":"\u63cf\u8ff0","source":"@site/docs/graph/ufs/number-of-provinces.md","sourceDirName":"graph/ufs","slug":"/graph/ufs/number-of-provinces","permalink":"/en/graph/ufs/number-of-provinces","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Number of Provinces"},"sidebar":"docs","previous":{"title":"Number of Connected Components in an Undirected Graph","permalink":"/en/graph/ufs/number-of-connected-components-in-an-undirected-graph"},"next":{"title":"Number of Islands","permalink":"/en/graph/ufs/number-of-islands"}}');var r=t(74848),s=t(28453),a=t(11470),l=t(19365);const o={title:"Number of Provinces"},c=void 0,u={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"DFS",id:"dfs",level:4},{value:"\u5e76\u67e5\u96c6",id:"\u5e76\u67e5\u96c6",level:4},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function f(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,r.jsx)(n.p,{children:"\u65e0"}),"\n",(0,r.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,r.jsx)(n.h4,{id:"dfs",children:"DFS"}),"\n","\n",(0,r.jsxs)(a.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(l.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Number of Provinces\n// Time complexity: O(N^2)\n// Space complexity: O(N)\npublic class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        final int N = isConnected.length;\n        boolean[] visited = new boolean[N];\n        int count = 0;\n        for (int i = 0; i < N; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, visited, i);\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // visited the ith node\n    private void dfs(int[][] isConnected, boolean[] visited, int i) {\n        for (int j = 0; j < isConnected.length; j++) {\n            if (isConnected[i][j] == 1 && !visited[j]) {\n                visited[j] = true;\n                dfs(isConnected, visited, j);\n            }\n        }\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Number of Provinces\n// Time complexity: O(N^2)\n// Space complexity: O(N)\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        const int N = isConnected.size();\n        vector<bool> visited(N, false);\n        int count = 0;\n        for (int i = 0; i < N; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, visited, i);\n                count++;\n            }\n        }\n        return count;\n    }\nprivate:\n    // visited the ith node\n    void dfs(const vector<vector<int>>& isConnected, vector<bool>& visited, int i) {\n        const int N = isConnected.size();\n        for (int j = 0; j < N; j++) {\n            if (isConnected[i][j] == 1 && !visited[j]) {\n                visited[j] = true;\n                dfs(isConnected, visited, j);\n            }\n        }\n    }\n};\n"})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Number of Provinces\n# Time complexity: O(N^2)\n# Space complexity: O(N)\nclass Solution:\n    def findCircleNum(self, isConnected: list[list[int]]) -> int:\n        N = len(isConnected)\n        visited = [False] * N\n        count = 0\n        for i in range(N):\n            if not visited[i]:\n                visited[i] = True\n                self.dfs(isConnected, visited, i)\n                count += 1\n        return count\n\n    # visited the ith node\n    def dfs(self, isConnected: list[list[int]], visited: list[bool], i: int) -> None:\n        for j in range(len(isConnected)):\n            if isConnected[i][j] == 1 and not visited[j]:\n                visited[j] = True\n                self.dfs(isConnected, visited, j)\n"})})})]}),"\n",(0,r.jsx)(n.h4,{id:"\u5e76\u67e5\u96c6",children:"\u5e76\u67e5\u96c6"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"cpp",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(l.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// TODO\n"})})}),(0,r.jsx)(l.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class DSU {\n// Plese copy from https://algorithm-essentials.soulmachine.me/graph/ufs/#union-by-rank\n};\n\n// Number of Provinces\n// Time complexity: O(N^2*log*N)\n// Space complexity: O(N)\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        const int N = isConnected.size();\n        DSU dsu(N);\n        int result = N; // number of provinces\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                if (isConnected[i][j] == 1) {\n                    result -= dsu.merge(i, j);\n                }\n            }\n        }\n        return result;\n    }\n};\n"})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# This is a comment indicating there is nothing to do yet\npass\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/en/graph/ufs/number-of-islands",children:"Number of Islands"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/en/graph/ufs/number-of-connected-components-in-an-undirected-graph",children:"Number of Connected Components in an Undirected Graph"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var i=t(34164);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>C});var i=t(96540),r=t(34164),s=t(23104),a=t(56347),l=t(205),o=t(57485),c=t(31682),u=t(70679);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function f(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=f(e),[a,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[c,d]=h({queryString:t,groupId:r}),[v,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,u.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),b=(()=>{const e=c??v;return p({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{b&&o(b)}),[b]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),m(e)}),[d,m,s]),tabValues:s}}var m=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function g(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),r=l[t].value;r!==i&&(c(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>o.push(e),onKeyDown:d,onClick:u,...s,className:(0,r.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function N(e){const n=v(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,j.jsx)(g,{...n,...e}),(0,j.jsx)(x,{...n,...e})]})}function C(e){const n=(0,m.A)();return(0,j.jsx)(N,{...e,children:d(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);