"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[395],{83818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"binary-tree/bst/kth-smallest-element-in-a-bst","title":"Kth Smallest Element in a BST","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/bst/kth-smallest-element-in-a-bst.md","sourceDirName":"binary-tree/bst","slug":"/binary-tree/bst/kth-smallest-element-in-a-bst","permalink":"/en/binary-tree/bst/kth-smallest-element-in-a-bst","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Kth Smallest Element in a BST"},"sidebar":"docs","previous":{"title":"LCA of BST","permalink":"/en/binary-tree/bst/lca-of-bst"},"next":{"title":"\u7b80\u4ecb","permalink":"/en/binary-tree/recursion/"}}');var l=t(74848),i=t(28453);const r={title:"Kth Smallest Element in a BST"},o=void 0,c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1",id:"\u89e3\u6cd5-1",level:3}];function a(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,l.jsxs)(n.p,{children:["Given a binary search tree, write a function ",(0,l.jsx)(n.code,{children:"kthSmallest"})," to find the kth smallest element in it."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,l.jsxs)(n.p,{children:["You may assume ",(0,l.jsx)(n.code,{children:"k"})," is always valid, ",(0,l.jsx)(n.code,{children:"1 \u2264 k \u2264"})," BST's total elements."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Follow up"}),":"]}),"\n",(0,l.jsx)(n.p,{children:"What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Hint"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Try to utilize the property of a BST."}),"\n",(0,l.jsx)(n.li,{children:"What if you could modify the BST node's structure?"}),"\n",(0,l.jsx)(n.li,{children:"The optimal runtime complexity is O(height of BST)."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,l.jsxs)(n.p,{children:["\u6700\u7b80\u5355\u7684\u529e\u6cd5\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u5373\u53ef\u4ee5\u5f97\u5230\u9012\u589e\u5e8f\u5217\uff0c\u4ece\u800c\u53ef\u4ee5\u627e\u5230\u7b2c k \u5927\u7684\u5143\u7d20\u3002\u65f6\u95f4\u590d\u6742\u5ea6",(0,l.jsx)(n.code,{children:"O(k)"}),"\u3002"]}),"\n",(0,l.jsxs)(n.p,{children:["\u5982\u679c\u80fd\u591f\u4fee\u6539\u8282\u70b9\u7684\u6570\u636e\u7ed3\u6784",(0,l.jsx)(n.code,{children:"TreeNode"}),"\uff0c\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u5b57\u6bb5",(0,l.jsx)(n.code,{children:"leftCnt"}),"\uff0c\u8868\u793a\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a",(0,l.jsx)(n.code,{children:"root"}),"\uff0c"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\u82e5 ",(0,l.jsx)(n.code,{children:"k == root.leftCnt+1"}),", \u5219\u8fd4\u56de root"]}),"\n",(0,l.jsxs)(n.li,{children:["\u82e5 ",(0,l.jsx)(n.code,{children:"k > node.leftCnt"}),", \u5219 ",(0,l.jsx)(n.code,{children:"k -= root.leftCnt+1"}),", ",(0,l.jsx)(n.code,{children:"root=root.right"})]}),"\n",(0,l.jsxs)(n.li,{children:["\u5426\u5219\uff0c",(0,l.jsx)(n.code,{children:"node = node.left"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a",(0,l.jsx)(n.code,{children:"O(height of BST)"}),"\u3002"]}),"\n",(0,l.jsx)(n.h3,{id:"\u89e3\u6cd5-1",children:"\u89e3\u6cd5 1"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// Kth Smallest Element in a BST\n// Time Complexity: O(k), Space Complexity: O(h)\npublic class Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        Stack<TreeNode> s = new Stack<>();\n        TreeNode p = root;\n\n        while (!s.empty() || p != null) {\n            if (p != null) {\n                s.push(p);\n                p = p.left;\n            } else {\n                p = s.pop();\n                if (--k == 0) return p.val;\n                p = p.right;\n            }\n        }\n        return -1;\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const l={},i=s.createContext(l);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);