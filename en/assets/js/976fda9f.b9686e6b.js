"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5188],{92999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"bitwise-operations/repeated-dna-sequences","title":"Repeated DNA Sequences","description":"\u63cf\u8ff0","source":"@site/docs/bitwise-operations/repeated-dna-sequences.md","sourceDirName":"bitwise-operations","slug":"/bitwise-operations/repeated-dna-sequences","permalink":"/en/bitwise-operations/repeated-dna-sequences","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Repeated DNA Sequences"},"sidebar":"docs","previous":{"title":"Reverse Bits","permalink":"/en/bitwise-operations/reverse-bits"},"next":{"title":"Number of 1 Bits","permalink":"/en/bitwise-operations/number-of-1-bits"}}');var r=t(74848),s=t(28453);const a={title:"Repeated DNA Sequences"},l=void 0,c={},o=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1 \u7b80\u5355\u7c97\u66b4",id:"\u89e3\u6cd5-1-\u7b80\u5355\u7c97\u66b4",level:3},{value:"\u89e3\u6cd5 2 \u5b8c\u7f8e\u54c8\u5e0c",id:"\u89e3\u6cd5-2-\u5b8c\u7f8e\u54c8\u5e0c",level:3}];function p(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,r.jsx)(n.p,{children:'All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.'}),"\n",(0,r.jsx)(n.p,{children:"Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule."}),"\n",(0,r.jsx)(n.p,{children:"For example,"}),"\n",(0,r.jsxs)(n.p,{children:["Given s = ",(0,r.jsx)(n.code,{children:'"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"'}),","]}),"\n",(0,r.jsx)(n.p,{children:"Return:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'["AAAAACCCCC", "CCCCCAAAAA"]'}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,r.jsxs)(n.p,{children:["\u9996\u5148\u80fd\u60f3\u5230\u4e00\u4e2a\u7b80\u5355\u76f4\u63a5\u7684\u65b9\u6cd5\uff0c\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u7a97\u53e3\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u653e\u5165 HashMap\uff0c\u5e76\u628a\u8ba1\u6570\u5668\u589e\u4e00\u3002\u6700\u540e\uff0c\u628a HashMap \u4e2d\u6240\u6709\u8ba1\u6570\u5668\u5927\u4e8e 1 \u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u6765\u3002\u65f6\u95f4\u590d\u6742\u5ea6 ",(0,r.jsx)(n.code,{children:"O(n)"}),", \u7531\u4e8e HashMap \u4e2d\u5b58\u50a8\u4e86\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6",(0,r.jsx)(n.code,{children:"O(10n)"}),"\u3002"]}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e\u5b57\u7b26\u4e32\u4e2d\u53ea\u5b58\u5728 A, C, G, T \u56db\u79cd\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u5b57\u7b26\u6620\u5c04\u4e3a 2 \u4e2a bit:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"A -> 00\nC -> 01\nG -> 10\nT -> 11\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u6bcf\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u6620\u5c04\u4e3a 20 bits, \u5c0f\u4e8e 32 \u4f4d\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u4e00\u4e2a\u6574\u6570\u3002\u8fd9\u4e2a\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u65e7\u662f",(0,r.jsx)(n.code,{children:"O(n)"}),"\uff0c\u4f46\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u5230\u4e86",(0,r.jsx)(n.code,{children:"O(n)"}),"\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"\u89e3\u6cd5-1-\u7b80\u5355\u7c97\u66b4",children:"\u89e3\u6cd5 1 \u7b80\u5355\u7c97\u66b4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Repeated DNA Sequences\n// Time Complexity: O(n), Space Complexity: O(10n)\npublic class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        final List<String> result = new ArrayList<>();\n        if (s.length() < 10) return result;\n\n        final Map<String, Integer> counter = new HashMap<>();\n\n        for (int i = 0; i < s.length() - 9; ++i) {\n            final String key = s.substring(i, i + 10);\n            int value = counter.getOrDefault(key, 0);\n            counter.put(key, value + 1);\n        }\n\n        for (Map.Entry<String, Integer> entry : counter.entrySet()) {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n            }\n        }\n        return result;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u89e3\u6cd5-2-\u5b8c\u7f8e\u54c8\u5e0c",children:"\u89e3\u6cd5 2 \u5b8c\u7f8e\u54c8\u5e0c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Repeated DNA Sequences\n// Time Complexity: O(n), Space Complexity: O(n)\npublic class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        final List<String> result = new ArrayList<>();\n        if (s.length() < LEN) return result;\n\n        final Map<Character, Integer> charMap = new HashMap<>();\n        charMap.put('A', 0);\n        charMap.put('C', 1);\n        charMap.put('G', 2);\n        charMap.put('T', 3);\n\n        final Map<Integer, Character> intMap = new HashMap<>();\n        intMap.put(0, 'A');\n        intMap.put(1, 'C');\n        intMap.put(2, 'G');\n        intMap.put(3, 'T');\n\n        final Map<Integer, Integer> counter = new HashMap<>();\n\n        for (int i = 0; i < s.length() - LEN + 1; ++i) {\n            final String key = s.substring(i, i + 10);\n            final int hashValue = strToInt(key, charMap);\n            counter.put(hashValue, counter.getOrDefault(hashValue, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {\n            if (entry.getValue() > 1) {\n                result.add(intToStr(entry.getKey(), intMap));\n            }\n        }\n        return result;\n    }\n\n    // perfect hash, no collisions\n    private static int strToInt(String s, Map<Character, Integer> charMap) {\n        assert s.length() == LEN;\n        int x = 0;\n        for (int i = 0; i < LEN; ++i) {\n            final char ch = s.charAt(i);\n            x = (x << 2) + charMap.get(ch);\n        }\n        return x;\n    }\n    private String intToStr(int x, Map<Integer, Character> intMap) {\n        final StringBuilder sb = new StringBuilder();\n\n        while (x > 0) {\n            final char ch = intMap.get(x & 3);\n            sb.append(ch);\n            x >>= 2;\n        }\n        while (sb.length() < LEN) sb.append(intMap.get(0));\n        return sb.reverse().toString();\n    }\n    private static final int LEN = 10;\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);