"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7177],{17209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"brute-force/subsets-ii","title":"Subsets II","description":"\u63cf\u8ff0","source":"@site/docs/brute-force/subsets-ii.md","sourceDirName":"brute-force","slug":"/brute-force/subsets-ii","permalink":"/en/brute-force/subsets-ii","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Subsets II"},"sidebar":"docs","previous":{"title":"Subsets","permalink":"/en/brute-force/subsets"},"next":{"title":"Permutations","permalink":"/en/brute-force/permutations"}}');var r=t(74848),i=t(28453),a=t(11470),u=t(19365);const l={title:"Subsets II"},o=void 0,c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:3},{value:"\u589e\u91cf\u6784\u9020\u6cd5",id:"\u589e\u91cf\u6784\u9020\u6cd5",level:4},{value:"\u4f4d\u5411\u91cf\u6cd5",id:"\u4f4d\u5411\u91cf\u6cd5",level:4},{value:"\u8fed\u4ee3",id:"\u8fed\u4ee3",level:3},{value:"\u589e\u91cf\u6784\u9020\u6cd5",id:"\u589e\u91cf\u6784\u9020\u6cd5-1",level:4},{value:"\u4e8c\u8fdb\u5236\u6cd5",id:"\u4e8c\u8fdb\u5236\u6cd5",level:4},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,r.jsxs)(n.p,{children:["Given a collection of integers that might contain duplicates, ",(0,r.jsx)(n.code,{children:"S"}),", return all possible subsets."]}),"\n",(0,r.jsx)(n.p,{children:"Note:"}),"\n",(0,r.jsxs)(n.p,{children:["Elements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf ",(0,r.jsx)(n.code,{children:"S = [1,2,2]"}),", a solution is:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u9898\u6709\u91cd\u590d\u5143\u7d20\uff0c\u4f46\u672c\u8d28\u4e0a\uff0c\u8ddf\u4e0a\u4e00\u9898\u5f88\u7c7b\u4f3c\uff0c\u4e0a\u4e00\u9898\u4e2d\u5143\u7d20\u6ca1\u6709\u91cd\u590d\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u80fd\u9009 0 \u6216 1 \u6b21\uff0c\u8fd9\u91cc\u6269\u5145\u5230\u4e86\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u9009 0 \u5230\u82e5\u5e72\u6b21\u800c\u5df2\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"\u9012\u5f52",children:"\u9012\u5f52"}),"\n",(0,r.jsx)(n.h4,{id:"\u589e\u91cf\u6784\u9020\u6cd5",children:"\u589e\u91cf\u6784\u9020\u6cd5"}),"\n","\n",(0,r.jsxs)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(u.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> path = new ArrayList<>();\n\n        dfs(nums, 0, path, result);\n        return result;\n    }\n\n    private static void dfs(int[] nums, int start, List<Integer> path,\n                            List<List<Integer>> result) {\n        result.add(new ArrayList<Integer>(path));\n\n        for (int i = start; i < nums.length; i++) {\n            if (i != start && nums[i] == nums[i-1]) continue;\n            path.add(nums[i]);\n            dfs(nums, i + 1, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}\n"})})}),(0,r.jsx)(u.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end());  // \u5fc5\u987b\u6392\u5e8f\n\n        vector<vector<int> > result;\n        vector<int> path;\n\n        dfs(S, S.begin(), path, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<int> &S, vector<int>::iterator start,\n            vector<int> &path, vector<vector<int> > &result) {\n        result.push_back(path);\n\n        for (auto i = start; i < S.end(); i++) {\n            if (i != start && *i == *(i-1)) continue;\n            path.push_back(*i);\n            dfs(S, i + 1, path, result);\n            path.pop_back();\n        }\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"\u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c 2"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(u.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> path = new ArrayList<>(); // \u4e2d\u95f4\u7ed3\u679c\n\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        HashMap<Integer, Integer> counterMap = new HashMap<>();\n        for (int i : nums) {\n            counterMap.put(i, counterMap.getOrDefault(i, 0) + 1);\n        }\n        // \u5c06HashMap\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\n        Pair[] counters = new Pair[counterMap.size()];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : counterMap.entrySet()) {\n            counters[i++] = new Pair(entry.getKey(), entry.getValue());\n        }\n        Arrays.sort(counters);\n\n        dfs(counters, 0, path, result);\n        return result;\n    }\n\n    private static void dfs(Pair[] counters, int step, List<Integer> path,\n                        List<List<Integer>> result) {\n        if (step == counters.length) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].value; i++) {\n            for (int j = 0; j < i; ++j) {\n                path.add(counters[step].key);\n            }\n            dfs(counters, step + 1, path, result);\n            for (int j = 0; j < i; ++j) {\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n\n    static class Pair implements Comparable<Pair> {\n        int key;\n        int value;\n        public Pair(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n        @Override\n        public int compareTo(Pair o) {\n            if (this.key < o.key) return -1;\n            else if (this.key > o.key) return 1;\n            else {\n                return this.value - o.value;\n            }\n        }\n    }\n}\n"})})}),(0,r.jsx)(u.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\uff0c\u7248\u672c2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &nums) {\n        vector<vector<int> > result;\n        sort(nums.begin(), nums.end()); // \u5fc5\u987b\u6392\u5e8f\n\n        unordered_map<int, int> count_map; // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        for (int i : nums) {\n            if (count_map.find(i) != count_map.end())\n                count_map[i]++;\n            else\n                count_map[i] = 1;\n        }\n\n        // \u5c06map\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2avector\u91cc\n        vector<pair<int, int> > elems;\n        for (auto p : count_map) {\n            elems.push_back(p);\n        }\n        sort(elems.begin(), elems.end());\n        vector<int> path; // \u4e2d\u95f4\u7ed3\u679c\n\n        dfs(elems, 0, path, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<pair<int, int> > &elems,\n            size_t step, vector<int> &path, vector<vector<int> > &result) {\n        if (step == elems.size()) {\n            result.push_back(path);\n            return;\n        }\n\n        for (int i = 0; i <= elems[step].second; i++) {\n            for (int j = 0; j < i; ++j) {\n                path.push_back(elems[step].first);\n            }\n            dfs(elems, step + 1, path, result);\n            for (int j = 0; j < i; ++j) {\n                path.pop_back();\n            }\n        }\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.h4,{id:"\u4f4d\u5411\u91cf\u6cd5",children:"\u4f4d\u5411\u91cf\u6cd5"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(u.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Subsets II\n// \u4f4d\u5411\u91cf\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        HashMap<Integer, Integer> counterMap = new HashMap<>();\n        for (int i : nums) {\n            counterMap.put(i, counterMap.getOrDefault(i, 0) + 1);\n        }\n        // \u5c06HashMap\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\n        Pair[] counters = new Pair[counterMap.size()];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : counterMap.entrySet()) {\n            counters[i++] = new Pair(entry.getKey(), entry.getValue());\n        }\n        Arrays.sort(counters);\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        HashMap<Integer, Integer> selected = new HashMap<>();\n        for (Pair p : counters) {\n            selected.put(p.key, 0 );\n        }\n\n        dfs(nums, counters, selected, 0, result);\n        return result;\n    }\n\n    private static void dfs(int[] nums, Pair[] counters, HashMap<Integer, Integer> selected,\n                            int step, List<List<Integer>> result) {\n        if (step == counters.length) {\n            ArrayList<Integer> subset = new ArrayList<>();\n            for (Pair p : counters) {\n                for (int i = 0; i < selected.get(p.key); ++i) {\n                    subset.add(p.key);\n                }\n            }\n            result.add(subset);\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].value; i++) {\n            selected.put(counters[step].key, i);\n            dfs(nums, counters, selected, step + 1, result);\n        }\n    }\n    static class Pair implements Comparable<Pair> {\n        int key;\n        int value;\n        public Pair(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            if (this.key < o.key) return -1;\n            else if (this.key > o.key) return 1;\n            else {\n                return this.value - o.value;\n            }\n        }\n    }\n}\n"})})}),(0,r.jsx)(u.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Subsets II\n// \u4f4d\u5411\u91cf\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &nums) {\n        vector<vector<int> > result; // \u5fc5\u987b\u6392\u5e8f\n        sort(nums.begin(), nums.end());\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        unordered_map<int, int> count_map;\n        for (int i : nums) {\n            if (count_map.find(i) != count_map.end())\n                count_map[i]++;\n            else\n                count_map[i] = 1;\n        }\n        // \u5c06map\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2avector\u91cc\n        vector<pair<int, int> > counters;\n        for (auto p : count_map) {\n            counters.push_back(p);\n        }\n        sort(counters.begin(), counters.end());\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        unordered_map<int, int> selected;\n        for (auto p : counters) {\n            selected[p.first] = 0;\n        }\n\n        dfs(nums, counters, selected, 0, result);\n        return result;\n    }\n\nprivate:\n    static void dfs(const vector<int> &S, const vector<pair<int, int> >& counters,\n            unordered_map<int, int>& selected, size_t step, vector<vector<int> > &result) {\n        if (step == counters.size()) {\n            vector<int> subset;\n            for (auto p : counters) {\n                for (int i = 0; i < selected[p.first]; ++i) {\n                    subset.push_back(p.first);\n                }\n            }\n            result.push_back(subset);\n            return;\n        }\n\n        for (int i = 0; i <= counters[step].second; i++) {\n            selected[counters[step].first] = i;\n            dfs(S, counters, selected, step + 1, result);\n        }\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"\u8fed\u4ee3",children:"\u8fed\u4ee3"}),"\n",(0,r.jsx)(n.h4,{id:"\u589e\u91cf\u6784\u9020\u6cd5-1",children:"\u589e\u91cf\u6784\u9020\u6cd5"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(u.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>();\n        result.add(new ArrayList<Integer>());\n\n        int previous_size = 0;\n        for (int i = 0; i < nums.length; ++i) {\n            final int size = result.size();\n            for (int j = 0; j < size; ++j) {\n                if (i == 0 || nums[i] != nums[i-1] || j >= previous_size) {\n                    result.add(new ArrayList<>(result.get(j)));\n                    result.get(result.size() - 1).add(nums[i]);\n                }\n            }\n            previous_size = size;\n        }\n        return result;\n    }\n}\n"})})}),(0,r.jsx)(u.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Subsets II\n// \u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end()); // \u5fc5\u987b\u6392\u5e8f\n        vector<vector<int> > result(1);\n\n        size_t previous_size = 0;\n        for (size_t i = 0; i < S.size(); ++i) {\n            const size_t size = result.size();\n            for (size_t j = 0; j < size; ++j) {\n                if (i == 0 || S[i] != S[i-1] || j >= previous_size) {\n                    result.push_back(result[j]);\n                    result.back().push_back(S[i]);\n                }\n            }\n            previous_size = size;\n        }\n        return result;\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.h4,{id:"\u4e8c\u8fdb\u5236\u6cd5",children:"\u4e8c\u8fdb\u5236\u6cd5"}),"\n",(0,r.jsxs)(a.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,r.jsx)(u.A,{value:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Subsets II\n// \u4e8c\u8fdb\u5236\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        // \u7528 set \u53bb\u91cd\uff0c\u4e0d\u80fd\u7528 unordered_set\uff0c\u56e0\u4e3a\u8f93\u51fa\u8981\u6c42\u6709\u5e8f\n        LinkedHashSet<ArrayList<Integer>> result = new LinkedHashSet<>();\n        final int n = nums.length;\n        ArrayList<Integer> v = new ArrayList<>();\n\n        for (int i = 0; i < 1 << n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if ((i & 1 << j) > 0)\n                    v.add(nums[j]);\n            }\n            result.add(new ArrayList<>(v));\n            v.clear();\n        }\n        List<List<Integer>> realResult = new ArrayList<>();\n        for (ArrayList<Integer> list : result) {\n            realResult.add(list);\n        }\n        return realResult;\n    }\n}\n"})})}),(0,r.jsx)(u.A,{value:"cpp",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Subsets II\n// \u4e8c\u8fdb\u5236\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(2^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > subsetsWithDup(vector<int> &S) {\n        sort(S.begin(), S.end()); // \u5fc5\u987b\u6392\u5e8f\n        // \u7528 set \u53bb\u91cd\uff0c\u4e0d\u80fd\u7528 unordered_set\uff0c\u56e0\u4e3a\u8f93\u51fa\u8981\u6c42\u6709\u5e8f\n        set<vector<int> > result;\n        const size_t n = S.size();\n        vector<int> v;\n\n        for (size_t i = 0; i < 1U << n; ++i) {\n            for (size_t j = 0; j < n; ++j) {\n                if (i & 1 << j)\n                    v.push_back(S[j]);\n            }\n            result.insert(v);\n            v.clear();\n        }\n        vector<vector<int> > real_result;\n        copy(result.begin(), result.end(), back_inserter(real_result));\n        return real_result;\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/en/brute-force/subsets",children:"Subsets"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var s=t(34164);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>x});var s=t(96540),r=t(34164),i=t(23104),a=t(56347),u=t(205),l=t(57485),o=t(31682),c=t(70679);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function v(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=d(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[o,p]=v({queryString:t,groupId:r}),[b,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),m=(()=>{const e=o??b;return h({value:e,tabValues:i})?e:null})();(0,u.A)((()=>{m&&l(m)}),[m]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),f(e)}),[p,f,i]),tabValues:i}}var f=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function g(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:u}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=u[t].value;r!==s&&(o(n),a(r))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:u.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:p,onClick:c,...i,className:(0,r.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function I(e){const n=b(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,j.jsx)(g,{...n,...e}),(0,j.jsx)(y,{...n,...e})]})}function x(e){const n=(0,f.A)();return(0,j.jsx)(I,{...e,children:p(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>u});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);