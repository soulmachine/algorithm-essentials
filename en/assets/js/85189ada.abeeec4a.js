"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7790],{56471:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>m,contentTitle:()=>u,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"sorting/radix-sort/maximum-gap","title":"Maximum Gap","description":"\u63cf\u8ff0","source":"@site/docs/sorting/radix-sort/maximum-gap.md","sourceDirName":"sorting/radix-sort","slug":"/sorting/radix-sort/maximum-gap","permalink":"/en/sorting/radix-sort/maximum-gap","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Maximum Gap"},"sidebar":"docs","previous":{"title":"\u7b80\u4ecb","permalink":"/en/sorting/radix-sort/"},"next":{"title":"Meeting Rooms II","permalink":"/en/sorting/heap-sort/meeting-rooms-ii"}}');var a=e(74848),r=e(28453);const s={title:"Maximum Gap"},u=void 0,m={},l=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1 \u6876\u6392\u5e8f",id:"\u89e3\u6cd5-1-\u6876\u6392\u5e8f",level:3},{value:"\u89e3\u6cd5 2 \u57fa\u6570\u6392\u5e8f",id:"\u89e3\u6cd5-2-\u57fa\u6570\u6392\u5e8f",level:3},{value:"\u89e3\u6cd5 3 \u8ba1\u6570\u6392\u5e8f",id:"\u89e3\u6cd5-3-\u8ba1\u6570\u6392\u5e8f",level:3}];function o(n){const i={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,a.jsx)(i.p,{children:"Given an unsorted array, find the maximum difference between the successive elements in its sorted form."}),"\n",(0,a.jsx)(i.p,{children:"Try to solve it in linear time/space."}),"\n",(0,a.jsx)(i.p,{children:"Return 0 if the array contains less than 2 elements."}),"\n",(0,a.jsx)(i.p,{children:"You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range."}),"\n",(0,a.jsx)(i.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,a.jsxs)(i.p,{children:["\u8fd9\u9053\u9898\u6700\u76f4\u63a5\u7684\u89e3\u6cd5\u662f\uff0c\u5148\u6392\u5e8f\uff0c\u5f97\u5230\u6709\u5e8f\u6570\u7ec4\uff0c\u7136\u540e\u76f8\u90bb\u5143\u7d20\u76f8\u51cf\uff0c\u627e\u51fa\u5dee\u6700\u5927\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6",(0,a.jsx)(i.code,{children:"O(n log n)"}),"\u3002"]}),"\n",(0,a.jsxs)(i.p,{children:["\u7136\u800c\u672c\u9898\u8981\u6c42",(0,a.jsx)(i.code,{children:"O(n)"}),"\u65f6\u95f4\uff0c\u6709\u6ca1\u6709",(0,a.jsx)(i.code,{children:"O(n)"}),"\u7684\u6392\u5e8f\u7b97\u6cd5\u5462\uff1f\u6876\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3002"]}),"\n",(0,a.jsx)(i.h3,{id:"\u89e3\u6cd5-1-\u6876\u6392\u5e8f",children:"\u89e3\u6cd5 1 \u6876\u6392\u5e8f"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-java",children:"// Maximum Gap\n// Bucket Sort\n// Time Complexity: O(n+k), Space Complexity: O(n+k)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        bucketSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n\n    private static void bucketSort(int[] nums) {\n        if (nums.length < 2) return;\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int bucketSize = (maxValue - minValue) / nums.length + 1;\n        final int bucketCount = (maxValue - minValue) / bucketSize + 1;\n        final ArrayList<Integer>[] buckets = new ArrayList[bucketCount];\n        for (int i = 0; i < buckets.length; ++i) {\n            buckets[i] = new ArrayList<>();\n        }\n\n        for (int x : nums) {\n            final int index = (x - minValue) / bucketSize;\n            buckets[index].add(x);\n        }\n\n        for (final ArrayList<Integer> list : buckets) {\n            Collections.sort(list);\n        }\n\n        int i = 0;\n        for (final ArrayList<Integer> list : buckets) {\n            for (int x : list) {\n                nums[i++] = x;\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(i.h3,{id:"\u89e3\u6cd5-2-\u57fa\u6570\u6392\u5e8f",children:"\u89e3\u6cd5 2 \u57fa\u6570\u6392\u5e8f"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-java",children:"// Maximum Gap\n// Radix Sort\n// Time Complexity: O(nd), Space Complexity: O(n+d)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        radixSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n    private static void radixSort(int[] nums) {\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int D = Integer.toString(maxValue - minValue).length();\n        final ArrayList<Integer>[] buckets = new ArrayList[10];\n        for (int i = 0; i < buckets.length; ++i) {\n            buckets[i] = new ArrayList<>();\n        }\n\n        for (int i = 0; i < D; ++i) {\n            for (int x : nums) {\n                final int index = getDigit(x - minValue, i);\n                final ArrayList<Integer> bucket = buckets[index];\n                bucket.add(x);\n            }\n\n            int index = 0;\n            for (ArrayList<Integer> bucket : buckets) {\n                for (int x : bucket) {\n                    nums[index++] = x;\n                }\n                bucket.clear();\n            }\n        }\n    }\n\n    // get the i-th digit of n\n    private static int getDigit(int n, int i) {\n        for (int j = 0; j < i; ++j) {\n            n /= 10;\n        }\n        return n % 10;\n    }\n}\n"})}),"\n",(0,a.jsx)(i.h3,{id:"\u89e3\u6cd5-3-\u8ba1\u6570\u6392\u5e8f",children:"\u89e3\u6cd5 3 \u8ba1\u6570\u6392\u5e8f"}),"\n",(0,a.jsx)(i.p,{children:"\u8ba1\u6570\u6392\u5e8f\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6876\u6392\u5e8f\uff0c\u5f53\u6876\u7684\u4e2a\u6570\u6700\u5927\u7684\u65f6\u5019\uff0c\u5c31\u662f\u8ba1\u6570\u6392\u5e8f\u3002"}),"\n",(0,a.jsx)(i.p,{children:"\u672c\u9898\u7528\u8ba1\u6570\u6392\u5e8f\u4f1a MLE\u3002"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-java",children:"// Maximum Gap\n// Counting Sort\n// Time Complexity: O(n), Space Complexity: O(max-min)\npublic class Solution {\n    public int maximumGap(int[] nums) {\n        if (nums.length < 2) return 0;\n        countingSort(nums);\n\n        int maxDiff = Integer.MIN_VALUE;\n        for (int i = 1; i < nums.length; ++i) {\n            maxDiff = Math.max(maxDiff, nums[i] - nums[i - 1]);\n        }\n        return maxDiff;\n    }\n    private static void countingSort(int[] nums) {\n        int minValue = Integer.MAX_VALUE;\n        int maxValue = Integer.MIN_VALUE;\n\n        for (int i : nums) {\n            minValue = Math.min(minValue, i);\n            maxValue = Math.max(maxValue, i);\n        }\n\n        final int[] buckets = new int[maxValue - minValue + 1];\n\n        for (int i : nums) {\n            buckets[i - minValue]++;\n        }\n\n        for (int i = 0, index = 0; i < buckets.length; ++i) {\n            Arrays.fill(nums, index, index + buckets[i], i + minValue);\n            index += buckets[i];\n        }\n    }\n}\n"})})]})}function c(n={}){const{wrapper:i}={...(0,r.R)(),...n.components};return i?(0,a.jsx)(i,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}},28453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>u});var t=e(96540);const a={},r=t.createContext(a);function s(n){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function u(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(r.Provider,{value:i},n.children)}}}]);