"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2920],{47584:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>u,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"binary-tree/traversal/binary-tree-postorder-traversal","title":"Binary Tree Postorder Traversal","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/traversal/binary-tree-postorder-traversal.md","sourceDirName":"binary-tree/traversal","slug":"/binary-tree/traversal/binary-tree-postorder-traversal","permalink":"/en/binary-tree/traversal/binary-tree-postorder-traversal","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Binary Tree Postorder Traversal"},"sidebar":"docs","previous":{"title":"Binary Tree Inorder Traversal","permalink":"/en/binary-tree/traversal/binary-tree-inorder-traversal"},"next":{"title":"Binary Tree Right Side View","permalink":"/en/binary-tree/traversal/binary-tree-right-side-view"}}');var l=n(74848),a=n(28453),o=n(11470),s=n(19365);const i={title:"Binary Tree Postorder Traversal"},u=void 0,c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6808",id:"\u6808",level:3},{value:"Morris \u540e\u5e8f\u904d\u5386",id:"morris-\u540e\u5e8f\u904d\u5386",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function p(e){const r={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,l.jsxs)(r.p,{children:["Given a binary tree, return the ",(0,l.jsx)(r.strong,{children:"postorder"})," traversal of its nodes' values."]}),"\n",(0,l.jsxs)(r.p,{children:["For example:\nGiven binary tree ",(0,l.jsx)(r.code,{children:"{1,#,2,3}"}),","]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{children:" 1\n  \\\n   2\n  /\n 3\n"})}),"\n",(0,l.jsxs)(r.p,{children:["return ",(0,l.jsx)(r.code,{children:"[3,2,1]"}),"."]}),"\n",(0,l.jsx)(r.p,{children:"Note: Recursive solution is trivial, could you do it iteratively?"}),"\n",(0,l.jsx)(r.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,l.jsx)(r.p,{children:"\u7528\u6808\u6216\u8005 Morris \u904d\u5386\u3002"}),"\n",(0,l.jsx)(r.h3,{id:"\u6808",children:"\u6808"}),"\n","\n",(0,l.jsxs)(o.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,l.jsx)(s.A,{value:"java",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        Stack<TreeNode> s = new Stack<>();\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        TreeNode p = root;\n        TreeNode q = null;\n\n        do {\n            while (p != null) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p.left;\n            }\n            q = null;\n            while (!s.empty()) {\n                p = s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p.right == q) {\n                    result.add(p.val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p.right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n}\n"})})}),(0,l.jsx)(s.A,{value:"cpp",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-cpp",children:"// Binary Tree Postorder Traversal\n// \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        stack<const TreeNode *> s;\n        /* p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n        const TreeNode *p = root, *q = nullptr;\n\n        do {\n            while (p != nullptr) { /* \u5f80\u5de6\u4e0b\u8d70*/\n                s.push(p);\n                p = p->left;\n            }\n            q = nullptr;\n            while (!s.empty()) {\n                p = s.top();\n                s.pop();\n                /* \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b*/\n                if (p->right == q) {\n                    result.push_back(p->val);\n                    q = p; /* \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9*/\n                } else {\n                    /* \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808*/\n                    s.push(p);\n                    /* \u5148\u5904\u7406\u53f3\u5b50\u6811*/\n                    p = p->right;\n                    break;\n                }\n            }\n        } while (!s.empty());\n\n        return result;\n    }\n};\n"})})}),(0,l.jsx)(s.A,{value:"python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"# Binary Tree Postorder Traversal\n# \u4f7f\u7528\u6808\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution:\n    def postorderTraversal(self, root):\n        result = []\n        s = []\n        # p\uff0c\u6b63\u5728\u8bbf\u95ee\u7684\u7ed3\u70b9\uff0cq\uff0c\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\n        p = root\n        q = None\n        while True:\n            while p: # \u5f80\u5de6\u4e0b\u8d70\n                s.append(p)\n                p = p.left\n            q = None\n            while s:\n                p = s.pop()\n                # \u53f3\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bbf\u95ee\u4e4b\n                if p.right == q:\n                    result.append(p.val)\n                    q = p # \u4fdd\u5b58\u521a\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\n                else:\n                    # \u5f53\u524d\u7ed3\u70b9\u4e0d\u80fd\u8bbf\u95ee\uff0c\u9700\u7b2c\u4e8c\u6b21\u8fdb\u6808\n                    s.append(p)\n                    # \u5148\u5904\u7406\u53f3\u5b50\u6811\n                    p = p.right\n                    break\n            if not s:\n                break\n        return result\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"morris-\u540e\u5e8f\u904d\u5386",children:"Morris \u540e\u5e8f\u904d\u5386"}),"\n",(0,l.jsxs)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,l.jsx)(s.A,{value:"java",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        TreeNode dummy = new TreeNode(-1);\n        dummy.left = root;\n        TreeNode cur = dummy;\n        TreeNode prev = null;\n\n        while (cur != null) {\n            if (cur.left == null) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur.right;\n            } else {\n                TreeNode node = cur.left;\n                while (node.right != null && node.right != cur)\n                    node = node.right;\n\n                if (node.right == null) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node.right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur.left, prev, result);\n                    prev.right = null;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur.right;\n                }\n            }\n        }\n        return result;\n    }\n    // \u9006\u8f6c\u8def\u5f84\n    private static void reverse(TreeNode from, TreeNode to) {\n        TreeNode x = from;\n        TreeNode y = from.right;\n        TreeNode z = null;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y.right;\n            y.right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    private static void visit_reverse(TreeNode from, TreeNode to,\n                                      List<Integer> result) {\n        TreeNode p = to;\n        reverse(from, to);\n\n        while (true) {\n            result.add(p.val);\n            if (p == from)\n                break;\n            p = p.right;\n        }\n\n        reverse(to, from);\n    }\n}\n"})})}),(0,l.jsx)(s.A,{value:"cpp",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-cpp",children:"// Binary Tree Postorder Traversal\n// Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> result;\n        TreeNode dummy(-1);\n        TreeNode *cur, *prev = nullptr;\n        std::function < void(const TreeNode*)> visit =\n            [&result](const TreeNode *node){\n            result.push_back(node->val);\n        };\n\n        dummy.left = root;\n        cur = &dummy;\n        while (cur != nullptr) {\n            if (cur->left == nullptr) {\n                prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                cur = cur->right;\n            } else {\n                TreeNode *node = cur->left;\n                while (node->right != nullptr && node->right != cur)\n                    node = node->right;\n\n                if (node->right == nullptr) { /* \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22 */\n                    node->right = cur;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->left;\n                } else { /* \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22  */\n                    visit_reverse(cur->left, prev, visit);\n                    prev->right = nullptr;\n                    prev = cur; /* \u5fc5\u987b\u8981\u6709 */\n                    cur = cur->right;\n                }\n            }\n        }\n        return result;\n    }\nprivate:\n    // \u9006\u8f6c\u8def\u5f84\n    static void reverse(TreeNode *from, TreeNode *to) {\n        TreeNode *x = from, *y = from->right, *z;\n        if (from == to) return;\n\n        while (x != to) {\n            z = y->right;\n            y->right = x;\n            x = y;\n            y = z;\n        }\n    }\n\n    // \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    static void visit_reverse(TreeNode* from, TreeNode *to,\n                     std::function< void(const TreeNode*) >& visit) {\n        TreeNode *p = to;\n        reverse(from, to);\n\n        while (true) {\n            visit(p);\n            if (p == from)\n                break;\n            p = p->right;\n        }\n\n        reverse(to, from);\n    }\n};\n"})})}),(0,l.jsx)(s.A,{value:"python",children:(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"# Binary Tree Postorder Traversal\n# Morris\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution:\n    def postorderTraversal(self, root):\n        result = []\n        dummy = TreeNode(-1)\n        dummy.left = root\n        cur = dummy\n        prev = None\n\n        while cur:\n            if cur.left is None:\n                prev = cur  # \u5fc5\u987b\u8981\u6709\n                cur = cur.right\n            else:\n                node = cur.left\n                while node.right and node.right != cur:\n                    node = node.right\n\n                if node.right is None:  # \u8fd8\u6ca1\u7ebf\u7d22\u5316\uff0c\u5219\u5efa\u7acb\u7ebf\u7d22\n                    node.right = cur\n                    prev = cur  # \u5fc5\u987b\u8981\u6709\n                    cur = cur.left\n                else:  # \u5df2\u7ecf\u7ebf\u7d22\u5316\uff0c\u5219\u8bbf\u95ee\u8282\u70b9\uff0c\u5e76\u5220\u9664\u7ebf\u7d22\n                    self.visit_reverse(cur.left, prev, result)\n                    prev.right = None\n                    prev = cur  # \u5fc5\u987b\u8981\u6709\n                    cur = cur.right\n\n        return result\n\n    # \u9006\u8f6c\u8def\u5f84\n    @staticmethod\n    def reverse(from_node, to_node):\n        x = from_node\n        y = from_node.right\n        z = None\n        if from_node == to_node:\n            return\n\n        while x != to_node:\n            z = y.right\n            y.right = x\n            x = y\n            y = z\n\n    # \u8bbf\u95ee\u9006\u8f6c\u540e\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\n    def visit_reverse(self, from_node, to_node, result):\n        p = to_node\n        self.reverse(from_node, to_node)\n\n        while True:\n            result.append(p.val)\n            if p == from_node:\n                break\n            p = p.right\n\n        self.reverse(to_node, from_node)\n"})})})]}),"\n",(0,l.jsx)(r.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/en/binary-tree/traversal/binary-tree-preorder-traversal",children:"Binary Tree Preorder Traversal"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/en/binary-tree/traversal/binary-tree-inorder-traversal",children:"Binary Tree Inorder Traversal"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"/en/binary-tree/traversal/recover-binary-search-tree",children:"Recover Binary Search Tree"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},19365:(e,r,n)=>{n.d(r,{A:()=>o});n(96540);var t=n(34164);const l={tabItem:"tabItem_Ymn6"};var a=n(74848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(l.tabItem,o),hidden:n,children:r})}},11470:(e,r,n)=>{n.d(r,{A:()=>j});var t=n(96540),l=n(34164),a=n(23104),o=n(56347),s=n(205),i=n(57485),u=n(31682),c=n(70679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return d(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:l}}=e;return{value:r,label:n,attributes:t,default:l}}))}(n);return function(e){const r=(0,u.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function h(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function v(e){let{queryString:r=!1,groupId:n}=e;const l=(0,o.W6)(),a=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,i.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(l.location.search);r.set(a,e),l.replace({...l.location,search:r.toString()})}),[a,l])]}function f(e){const{defaultValue:r,queryString:n=!1,groupId:l}=e,a=p(e),[o,i]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:a}))),[u,d]=v({queryString:n,groupId:l}),[f,m]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[l,a]=(0,c.Dv)(n);return[l,(0,t.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:l}),b=(()=>{const e=u??f;return h({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),m(e)}),[d,m,a]),tabValues:a}}var m=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(74848);function g(e){let{className:r,block:n,selectedValue:t,selectValue:o,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const r=e.currentTarget,n=i.indexOf(r),l=s[n].value;l!==t&&(u(r),o(l))},d=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;r=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;r=i[n]??i[i.length-1];break}}r?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},r),children:s.map((e=>{let{value:r,label:n,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>i.push(e),onKeyDown:d,onClick:c,...a,className:(0,l.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function T(e){let{lazy:r,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function x(e){const r=f(e);return(0,y.jsxs)("div",{className:(0,l.A)("tabs-container",b.tabList),children:[(0,y.jsx)(g,{...r,...e}),(0,y.jsx)(T,{...r,...e})]})}function j(e){const r=(0,m.A)();return(0,y.jsx)(x,{...e,children:d(e.children)},String(r))}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(96540);const l={},a=t.createContext(l);function o(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);