"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1843],{61591:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"binary-tree/bst/convert-sorted-list-to-binary-search-tree","title":"Convert Sorted List to Binary Search Tree","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/bst/convert-sorted-list-to-binary-search-tree.md","sourceDirName":"binary-tree/bst","slug":"/binary-tree/bst/convert-sorted-list-to-binary-search-tree","permalink":"/en/binary-tree/bst/convert-sorted-list-to-binary-search-tree","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Convert Sorted List to Binary Search Tree"},"sidebar":"docs","previous":{"title":"Convert Sorted Array to Binary Search Tree","permalink":"/en/binary-tree/bst/convert-sorted-array-to-binary-search-tree"},"next":{"title":"LCA of BST","permalink":"/en/binary-tree/bst/lca-of-bst"}}');var a=n(74848),l=n(28453),o=n(11470),s=n(19365);const i={title:"Convert Sorted List to Binary Search Tree"},d=void 0,u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b",id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b",level:3},{value:"\u81ea\u5e95\u5411\u4e0a",id:"\u81ea\u5e95\u5411\u4e0a",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function h(e){const t={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,a.jsx)(t.p,{children:"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST."}),"\n",(0,a.jsx)(t.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,a.jsx)(t.p,{children:"\u8fd9\u9898\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u5355\u94fe\u8868\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff0c\u800c\u81ea\u9876\u5411\u4e0b\u7684\u4e8c\u5206\u6cd5\u5fc5\u987b\u9700\u8981 RandomAccessIterator\uff0c\u56e0\u6b64\u524d\u9762\u7684\u65b9\u6cd5\u4e0d\u9002\u7528\u672c\u9898\u3002"}),"\n",(0,a.jsxs)(t.p,{children:["\u5b58\u5728\u4e00\u79cd\u81ea\u5e95\u5411\u4e0a(bottom-up)\u7684\u65b9\u6cd5\uff0c\u89c1 ",(0,a.jsx)(t.a,{href:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html",children:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html"})]}),"\n",(0,a.jsx)(t.h3,{id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b",children:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b"}),"\n",(0,a.jsxs)(t.p,{children:["\u5206\u6cbb\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\u81ea\u9876\u5411\u4e0b\uff0c\u590d\u6742\u5ea6 ",(0,a.jsx)(t.code,{children:"O(nlogn)"}),"\u3002"]}),"\n","\n",(0,a.jsxs)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,a.jsx)(s.A,{value:"java",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\n    public TreeNode sortedListToBST (ListNode head) {\n        if(head == null) return null;\n        if(head.next == null) return new TreeNode(head.val);\n\n        ListNode mid = cutAtMiddle(head);\n\n        TreeNode root = new TreeNode(mid.val);\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(mid.next);\n\n        return root;\n    }\n\n    ListNode cutAtMiddle(ListNode head) {\n        if(head == null) return null;\n\n        ListNode fast = head;\n        ListNode slow = head;\n        ListNode prev_slow = head;\n\n        while(fast != null && fast.next != null){\n            prev_slow = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        prev_slow.next = null;\n        return slow;\n    }\n}\n"})})}),(0,a.jsx)(s.A,{value:"cpp",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode* sortedListToBST (ListNode* head) {\n        if(head == nullptr) return nullptr;\n        if(head->next == nullptr) return new TreeNode(head->val);\n\n        ListNode *mid = cutAtMiddle(head);\n\n        TreeNode *root = new TreeNode(mid->val);\n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(mid->next);\n\n        return root;\n    }\n\n    ListNode* cutAtMiddle(ListNode *head) {\n        if(head == nullptr) return nullptr;\n\n        ListNode *fast = head;\n        ListNode *slow = head;\n        ListNode *prev_slow = head;\n\n        while(fast != nullptr && fast->next != nullptr){\n            prev_slow = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev_slow->next = nullptr;\n        return slow;\n    }\n};\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"\u81ea\u5e95\u5411\u4e0a",children:"\u81ea\u5e95\u5411\u4e0a"}),"\n",(0,a.jsxs)(o.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,a.jsx)(s.A,{value:"java",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        int len = 0;\n        ListNode p = head;\n        while (p != null) {\n            len++;\n            p = p.next;\n        }\n        return sortedListToBST(new Container(head), 0, len - 1);\n    }\n    private static TreeNode sortedListToBST(Container list, int start, int end) {\n        if (start > end) return null;\n\n        int mid = start + (end - start) / 2;\n        TreeNode leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode parent = new TreeNode(list.p.val);\n        parent.left = leftChild;\n        list.p = list.p.next;\n        parent.right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n    // \u6a21\u62df\u4e8c\u7ea7\u6307\u9488\n    static class Container {\n        ListNode p;\n        public Container(ListNode p) {\n            this.p = p;\n        }\n    }\n}\n"})})}),(0,a.jsx)(s.A,{value:"cpp",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode *sortedListToBST(ListNode *head) {\n        int len = 0;\n        ListNode *p = head;\n        while (p) {\n            len++;\n            p = p->next;\n        }\n        return sortedListToBST(head, 0, len - 1);\n    }\nprivate:\n    TreeNode* sortedListToBST(ListNode*& list, int start, int end) {\n        if (start > end) return nullptr;\n\n        int mid = start + (end - start) / 2;\n        TreeNode *leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode *parent = new TreeNode(list->val);\n        parent->left = leftChild;\n        list = list->next;\n        parent->right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n};\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/en/binary-tree/bst/convert-sorted-array-to-binary-search-tree",children:"Convert Sorted Array to Binary Search Tree"})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var l=n(74848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>N});var r=n(96540),a=n(34164),l=n(23104),o=n(56347),s=n(205),i=n(57485),d=n(31682),u=n(70679);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function v(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=h(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[d,c]=v({queryString:n,groupId:a}),[f,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),m=(()=>{const e=d??f;return p({value:e,tabValues:l})?e:null})();(0,s.A)((()=>{m&&i(m)}),[m]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),b(e)}),[c,b,l]),tabValues:l}}var b=n(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var T=n(74848);function x(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),u=e=>{const t=e.currentTarget,n=i.indexOf(t),a=s[n].value;a!==r&&(d(t),o(a))},c=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,T.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:l}=e;return(0,T.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>i.push(e),onKeyDown:c,onClick:u,...l,className:(0,a.A)("tabs__item",m.tabItem,l?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:l}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===l));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,T.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==l})))})}function S(e){const t=f(e);return(0,T.jsxs)("div",{className:(0,a.A)("tabs-container",m.tabList),children:[(0,T.jsx)(x,{...t,...e}),(0,T.jsx)(y,{...t,...e})]})}function N(e){const t=(0,b.A)();return(0,T.jsx)(S,{...e,children:c(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},l=r.createContext(a);function o(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);