"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[431],{81:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"graph/graph-valid-tree","title":"Graph Valid Tree","description":"\u63cf\u8ff0","source":"@site/docs/graph/graph-valid-tree.md","sourceDirName":"graph","slug":"/graph/graph-valid-tree","permalink":"/en/graph/graph-valid-tree","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Graph Valid Tree"},"sidebar":"docs","previous":{"title":"Clone Graph","permalink":"/en/graph/clone-graph"},"next":{"title":"Network Delay Time","permalink":"/en/graph/network-delay-time"}}');var i=t(74848),r=t(28453),s=t(11470),l=t(19365);const o={title:"Graph Valid Tree"},d=void 0,u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}];function h(e){const n={blockquote:"blockquote",br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,i.jsxs)(n.p,{children:["Given ",(0,i.jsx)(n.code,{children:"n"})," nodes labeled from 0 to ",(0,i.jsx)(n.code,{children:"n-1"})," and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Example 1"}),":"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Output"}),": true"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Output"}),": false"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": you can assume that no duplicate edges will appear in edges. Since all edges are undirected, ",(0,i.jsx)(n.code,{children:"[0,1]"})," is the same as ",(0,i.jsx)(n.code,{children:"[1,0]"})," and thus will not appear together in edges."]}),"\n",(0,i.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,i.jsx)(n.p,{children:"\u4e00\u4e2a\u56fe\u662f\u4e00\u9897\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u56fe\u662f\u5168\u8fde\u901a\u7684\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u5b83\u4fe9\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u56fe\u91cc\u6ca1\u6709\u73af\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u7528 DFS \u548c BFS \u904d\u5386\u56fe\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u3002\u5982\u679c\u67d0\u4e2a\u7ed3\u70b9\u88ab\u8bbf\u95ee\u4e86\u4e24\u6b21\uff0c\u8bf4\u660e\u5b58\u5728\u73af\uff1b\u904d\u5386\u7ed3\u675f\u540e\uff0c\u5982\u679c\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u6570\u91cf\u5c0f\u4e8e\u56fe\u4e2d\u7ed3\u70b9\u603b\u6570\uff0c\u8bf4\u660e\u56fe\u4e0d\u662f\u5168\u8fde\u901a\u7684\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n","\n",(0,i.jsxs)(s.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,i.jsx)(l.A,{value:"python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Graph Valid Tree\n# DFS\n# Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if len(edges) != n - 1: return False\n\n        adj_list = [[] for _ in range(n)]\n        for A, B in edges:\n            adj_list[A].append(B)\n            adj_list[B].append(A)\n\n        stack = [0]\n        visited = {0}\n\n        while stack:\n            node = stack.pop()\n            for neighbour in adj_list[node]:\n                if neighbour in visited: continue\n                stack.append(neighbour)\n                visited.add(neighbour)\n\n        return len(visited) == n\n"})})}),(0,i.jsx)(l.A,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Graph Valid Tree\n// DFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\n    public boolean validTree(int n, int[][] edges) {\n        if (edges.length != n - 1) return false;\n\n        // Construct the adjacency list.\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjacencyList.get(edge[0]).add(edge[1]);\n            adjacencyList.get(edge[1]).add(edge[0]);\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        Set<Integer> visited = new HashSet<>();\n        stack.push(0);\n        visited.add(0);\n\n        while (!stack.isEmpty()) {\n            int node = stack.pop();\n            for (int neighbour : adjacencyList.get(node)) {\n                if (visited.contains(neighbour)) continue;\n                stack.push(neighbour);\n                visited.add(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n}\n"})})}),(0,i.jsx)(l.A,{value:"cpp",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// Graph Valid Tree\n// DFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n        if (edges.size() != n - 1) return false;\n\n        // Construct the adjacency list.\n        vector<vector<int>> adj_list(n);\n        for (const vector<int>& edge : edges) {\n            adj_list[edge[0]].push_back(edge[1]);\n            adj_list[edge[1]].push_back(edge[0]);\n        }\n\n        stack<int> stack;\n        unordered_set<int> visited;\n        stack.push(0);\n        visited.insert(0);\n\n        while (!stack.empty()) {\n            int node = stack.top(); stack.pop();\n            for (int neighbour : adj_list[node]) {\n                if (visited.count(neighbour)) continue;\n                stack.push(neighbour);\n                visited.insert(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n};\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,i.jsxs)(s.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,i.jsx)(l.A,{value:"python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Graph Valid Tree\n# BFS\n# Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if len(edges) != n - 1: return False\n\n        adj_list = [[] for _ in range(n)]\n        for A, B in edges:\n            adj_list[A].append(B)\n            adj_list[B].append(A)\n\n        queue = deque([0])\n        visited = {0}\n\n        while queue:\n            node = queue.popleft()\n            for neighbour in adj_list[node]:\n                if neighbour in visited: continue\n                queue.append(neighbour)\n                visited.add(neighbour)\n\n        return len(visited) == n\n"})})}),(0,i.jsx)(l.A,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Graph Valid Tree\n// BFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\n    public boolean validTree(int n, int[][] edges) {\n        if (edges.length != n - 1) return false;\n\n        // Construct the adjacency list.\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjacencyList.get(edge[0]).add(edge[1]);\n            adjacencyList.get(edge[1]).add(edge[0]);\n        }\n\n        Queue<Integer> queue = new LinkedList<>();\n        Set<Integer> visited = new HashSet<>();\n        queue.offer(0);\n        visited.add(0);\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbour : adjacencyList.get(node)) {\n                if (visited.contains(neighbour)) continue;\n                queue.offer(neighbour);\n                visited.add(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n}\n"})})}),(0,i.jsx)(l.A,{value:"cpp",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// Graph Valid Tree\n// BFS\n// Time Complexity: O(N+E), Space Complexity : O(N + E)\nclass Solution {\npublic:\n    bool validTree(int n, vector<vector<int>>& edges) {\n        if (edges.size() != n - 1) return false;\n\n        // Construct the adjacency list.\n        vector<vector<int>> adj_list(n);\n        for (const vector<int>& edge : edges) {\n            adj_list[edge[0]].push_back(edge[1]);\n            adj_list[edge[1]].push_back(edge[0]);\n        }\n\n        queue<int> queue;\n        unordered_set<int> visited;\n        queue.push(0);\n        visited.insert(0);\n\n        while (!queue.empty()) {\n            int node = queue.front(); queue.pop();\n            for (int neighbour : adj_list[node]) {\n                if (visited.count(neighbour)) continue;\n                queue.push(neighbour);\n                visited.insert(neighbour);\n            }\n        }\n\n        return visited.size() == n;\n    }\n};\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(34164);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>k});var a=t(96540),i=t(34164),r=t(23104),s=t(56347),l=t(205),o=t(57485),d=t(31682),u=t(70679);function c(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=h(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[d,c]=g({queryString:t,groupId:i}),[v,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,u.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),b=(()=>{const e=d??v;return p({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{b&&o(b)}),[b]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,r]),tabValues:r}}var f=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=t(74848);function j(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),i=l[t].value;i!==a&&(d(n),s(i))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>o.push(e),onKeyDown:c,onClick:u,...r,className:(0,i.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=v(e);return(0,m.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,m.jsx)(j,{...n,...e}),(0,m.jsx)(x,{...n,...e})]})}function k(e){const n=(0,f.A)();return(0,m.jsx)(y,{...e,children:c(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);