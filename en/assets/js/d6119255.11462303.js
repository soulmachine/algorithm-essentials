"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[4180],{9241:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"binary-tree/recursion/serialize-and-deserialize-binary-tree","title":"Serialize and Deserialize Binary Tree","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/recursion/serialize-and-deserialize-binary-tree.md","sourceDirName":"binary-tree/recursion","slug":"/binary-tree/recursion/serialize-and-deserialize-binary-tree","permalink":"/en/binary-tree/recursion/serialize-and-deserialize-binary-tree","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Serialize and Deserialize Binary Tree"},"sidebar":"docs","previous":{"title":"Lowest Common Ancestor of a Binary Tree III","permalink":"/en/binary-tree/recursion/lowest-common-ancestor-of-a-binary-tree-iii"},"next":{"title":"Print Binary Tree","permalink":"/en/binary-tree/recursion/print-binary-tree"}}');var t=r(74848),a=r(28453),l=r(11470),i=r(19365);const o={title:"Serialize and Deserialize Binary Tree"},c=void 0,d={},u=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function h(e){const n={a:"a",annotation:"annotation",blockquote:"blockquote",br:"br",code:"code",h3:"h3",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,t.jsx)(n.p,{children:"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment."}),"\n",(0,t.jsx)(n.p,{children:"Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure."}),"\n",(0,t.jsxs)(n.p,{children:["Clarification: The input/output format is the same as ",(0,t.jsx)(n.a,{href:"https://leetcode.com/faq/#binary-tree",children:"how LeetCode serializes a binary tree"}),". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"  1\n / \\\n2   3\n   / \\\n  4   5\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input"}),": root = [1,2,3,null,null,4,5]",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output"}),": [1,2,3,null,null,4,5]"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input"}),": root = []",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output"}),": []"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 3"}),":"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input"}),": root = [1]",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output"}),": [1]"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example 4"}),":"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input"}),": root = [1,2]",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output"}),": [1,2]"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constraints"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The number of nodes in the tree is in the range [0, ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mn,{children:"1"}),(0,t.jsxs)(n.msup,{children:[(0,t.jsx)(n.mn,{children:"0"}),(0,t.jsx)(n.mn,{children:"4"})]})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"10^4"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1"}),(0,t.jsxs)(n.span,{className:"mord",children:[(0,t.jsx)(n.span,{className:"mord",children:"0"}),(0,t.jsx)(n.span,{className:"msupsub",children:(0,t.jsx)(n.span,{className:"vlist-t",children:(0,t.jsx)(n.span,{className:"vlist-r",children:(0,t.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(n.span,{className:"mord mtight",children:"4"})})]})})})})})]})]})})]}),"]."]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mo,{children:"\u2212"}),(0,t.jsx)(n.mn,{children:"1000"}),(0,t.jsx)(n.mo,{children:"\u2264"}),(0,t.jsx)(n.mi,{children:"N"}),(0,t.jsx)(n.mi,{children:"o"}),(0,t.jsx)(n.mi,{children:"d"}),(0,t.jsx)(n.mi,{children:"e"}),(0,t.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,t.jsx)(n.mi,{children:"v"}),(0,t.jsx)(n.mi,{children:"a"}),(0,t.jsx)(n.mi,{children:"l"}),(0,t.jsx)(n.mo,{children:"\u2264"}),(0,t.jsx)(n.mn,{children:"1000"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"-1000 \\leq Node.val \\leq 1000"})]})})}),(0,t.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.7804em",verticalAlign:"-0.136em"}}),(0,t.jsx)(n.span,{className:"mord",children:"\u2212"}),(0,t.jsx)(n.span,{className:"mord",children:"1000"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"\u2264"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.8304em",verticalAlign:"-0.136em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,t.jsx)(n.span,{className:"mord",children:"."}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(n.span,{className:"mrel",children:"\u2264"}),(0,t.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(n.span,{className:"mord",children:"1000"})]})]})]})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u9898\u672c\u8d28\u4e0a\u8003\u7684\u662f\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\uff0cBFS\uff0c\u65e0\u8bba\u54ea\u79cd\u90fd\u53ef\u4ee5\u3002"}),"\n",(0,t.jsx)(n.p,{children:'\u6ce8\u610f\uff0c\u7a7a\u53f6\u5b50\u8282\u70b9\u4e5f\u5fc5\u987b\u7f16\u7801\u4e3a"null"\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u5b58\u5b8c\u6574\u7684\u6811\u7ed3\u6784\u3002'}),"\n",(0,t.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n","\n",(0,t.jsxs)(l.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,t.jsx)(i.A,{value:"python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Serialize and Deserialize Binary Tree\n# Time Complexity O(n), Space Complexity O(n)\nclass Codec:\n\n    def serialize(self, root):\n        return self.serializeDFS(root, "")\n\n    def serializeDFS(self, root, string: str):\n        if root is None:\n            string += "null,"\n        else:\n            string += str(root.val) + ","\n            string = self.serializeDFS(root.left, string)\n            string = self.serializeDFS(root.right, string)\n        return string\n\n    def deserialize(self, data):\n        return self.deserializeDFS(data.split(\',\'))\n\n    def deserializeDFS(self, l):\n        if l[0] == \'null\':\n            l.pop(0)\n            return None\n\n        root = TreeNode(l[0])\n        l.pop(0)\n        root.left = self.deserializeDFS(l)\n        root.right = self.deserializeDFS(l)\n        return root\n'})})}),(0,t.jsx)(i.A,{value:"java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\npublic class Codec {\n\n    public String serialize(TreeNode root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    private static String serializeDFS(TreeNode root, String str) {\n        if (root == null) {\n            str += "null," ;\n        } else {\n            str += String.valueOf(root.val) + ",";\n            str = serializeDFS(root.left, str);\n            str = serializeDFS(root.right, str);\n        }\n        return str;\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] arr = data.split(",");\n        LinkedList<String> l = new LinkedList<>(Arrays.asList(arr));\n        return deserializeDFS(l);\n    }\n\n    private static TreeNode deserializeDFS(LinkedList<String> l) {\n        if (l.peekFirst().equals("null")) {\n            l.pollFirst();\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(l.pollFirst()));\n        root.left = deserializeDFS(l);\n        root.right = deserializeDFS(l);\n        return root;\n    }\n}\n'})})}),(0,t.jsx)(i.A,{value:"cpp",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    string serializeDFS(TreeNode* root, string str) {\n        if (root == nullptr) {\n            str += "null,";\n        } else {\n            str += std::to_string(root->val) + ",";\n            str = serializeDFS(root->left, str);\n            str = serializeDFS(root->right, str);\n        }\n        return str;\n    }\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream ss(data);\n        list<string> l;\n\n        string tmp;\n        while (getline(ss, tmp, \',\')) {\n            l.push_back(tmp);\n        }\n\n        return deserializeDFS(l);\n    }\n\n    TreeNode* deserializeDFS(list<string> &l) {\n        if (l.front() == "null") {\n            l.pop_front();\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(std::stoi(l.front()));\n        l.pop_front();\n        root->left = deserializeDFS(l);\n        root->right = deserializeDFS(l);\n        return root;\n    }\n};\n'})})})]}),"\n",(0,t.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/en/binary-tree/recursion/path-sum-ii",children:"Path Sum II"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>l});r(96540);var s=r(34164);const t={tabItem:"tabItem_Ymn6"};var a=r(74848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,l),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>N});var s=r(96540),t=r(34164),a=r(23104),l=r(56347),i=r(205),o=r(57485),c=r(31682),d=r(70679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:t}}=e;return{value:n,label:r,attributes:s,default:t}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const t=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,a=h(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,u]=p({queryString:r,groupId:t}),[x,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,a]=(0,d.Dv)(r);return[t,(0,s.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:t}),g=(()=>{const e=c??x;return m({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)}),[u,j,a]),tabValues:a}}var j=r(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(74848);function b(e){let{className:n,block:r,selectedValue:s,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,r=o.indexOf(n),t=i[r].value;t!==s&&(c(n),l(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:i.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>o.push(e),onKeyDown:u,onClick:d,...a,className:(0,t.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:a}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,t.A)("tabs-container",g.tabList),children:[(0,f.jsx)(b,{...n,...e}),(0,f.jsx)(v,{...n,...e})]})}function N(e){const n=(0,j.A)();return(0,f.jsx)(y,{...e,children:u(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var s=r(96540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);