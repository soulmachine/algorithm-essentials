"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[9751],{68433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>u,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"string/valid-number","title":"Valid Number","description":"\u63cf\u8ff0","source":"@site/docs/string/valid-number.md","sourceDirName":"string","slug":"/string/valid-number","permalink":"/string/valid-number","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Valid Number"},"sidebar":"docs","previous":{"title":"Longest Common Prefix","permalink":"/string/longest-common-prefix"},"next":{"title":"Integer to Roman","permalink":"/string/integer-to-roman"}}');var s=n(74848),r=n(28453),i=n(11470),l=n(19365);const u={title:"Valid Number"},o=void 0,c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6709\u9650\u81ea\u52a8\u673a",id:"\u6709\u9650\u81ea\u52a8\u673a",level:3}];function d(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,s.jsx)(t.p,{children:"Validate if a given string is numeric."}),"\n",(0,s.jsx)(t.p,{children:"Some examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'"0" => true\n" 0.1 " => true\n"abc" => false\n"1 a" => false\n"2e10" => true\n'})}),"\n",(0,s.jsx)(t.p,{children:"Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one."}),"\n",(0,s.jsx)(t.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,s.jsx)(t.p,{children:"\u7ec6\u8282\u5b9e\u73b0\u9898\u3002"}),"\n",(0,s.jsxs)(t.p,{children:["\u672c\u9898\u7684\u529f\u80fd\u4e0e\u6807\u51c6\u5e93\u4e2d\u7684",(0,s.jsx)(t.code,{children:"strtod()"}),"\u529f\u80fd\u7c7b\u4f3c\u3002"]}),"\n",(0,s.jsx)(t.h3,{id:"\u6709\u9650\u81ea\u52a8\u673a",children:"\u6709\u9650\u81ea\u52a8\u673a"}),"\n","\n",(0,s.jsxs)(i.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,s.jsx)(l.A,{value:"java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"// Valid Number\n// finite automata\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public boolean isNumber(String s) {\n        int[][] transitionTable  = new int[][] {\n            { -1, 0, 3, 1, 2, -1 }, // next states for state 0\n            { -1, 8, -1, 1, 4, 5 },     // next states for state 1\n            { -1, -1, -1, 4, -1, -1 },     // next states for state 2\n            { -1, -1, -1, 1, 2, -1 },     // next states for state 3\n            { -1, 8, -1, 4, -1, 5 },     // next states for state 4\n            { -1, -1, 6, 7, -1, -1 },     // next states for state 5\n            { -1, -1, -1, 7, -1, -1 },     // next states for state 6\n            { -1, 8, -1, 7, -1, -1 },     // next states for state 7\n            { -1, 8, -1, -1, -1, -1 }     // next states for state 8\n        };\n\n        int state = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            final char ch = s.charAt(i);\n            InputType inputType = InputType.INVALID;\n\n            if (Character.isSpaceChar(ch))\n                inputType = InputType.SPACE;\n            else if (ch == '+' || ch == '-')\n                inputType = InputType.SIGN;\n            else if (Character.isDigit(ch))\n                inputType = InputType.DIGIT;\n            else if (ch == '.')\n                inputType = InputType.DOT;\n            else if (ch == 'e' || ch == 'E')\n                inputType = InputType.EXPONENT;\n\n            // Get next state from current state and input symbol\n            state = transitionTable[state][inputType.ordinal()];\n\n            // Invalid input\n            if (state == -1) return false;\n        }\n        // If the current state belongs to one of the accepting (final) states,\n        // then the number is valid\n        return state == 1 || state == 4 || state == 7 || state == 8;\n\n    }\n    enum InputType {\n        INVALID,    // 0\n        SPACE,      // 1\n        SIGN,       // 2\n        DIGIT,      // 3\n        DOT,        // 4\n        EXPONENT,   // 5\n        NUM_INPUTS  // 6\n    }\n}\n"})})}),(0,s.jsx)(l.A,{value:"cpp",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"// Valid Number\n// @author \u9f9a\u9646\u5b89 (http://weibo.com/luangong)\n// finite automata\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    bool isNumber(const string& s) {\n        enum InputType {\n            INVALID,    // 0\n            SPACE,      // 1\n            SIGN,       // 2\n            DIGIT,      // 3\n            DOT,        // 4\n            EXPONENT,   // 5\n            NUM_INPUTS  // 6\n        };\n        const int transitionTable[][NUM_INPUTS] = {\n                -1, 0, 3, 1, 2, -1, // next states for state 0\n                -1, 8, -1, 1, 4, 5,     // next states for state 1\n                -1, -1, -1, 4, -1, -1,     // next states for state 2\n                -1, -1, -1, 1, 2, -1,     // next states for state 3\n                -1, 8, -1, 4, -1, 5,     // next states for state 4\n                -1, -1, 6, 7, -1, -1,     // next states for state 5\n                -1, -1, -1, 7, -1, -1,     // next states for state 6\n                -1, 8, -1, 7, -1, -1,     // next states for state 7\n                -1, 8, -1, -1, -1, -1,     // next states for state 8\n                };\n\n        int state = 0;\n        for (auto ch : s) {\n            InputType inputType = INVALID;\n            if (isspace(ch))\n                inputType = SPACE;\n            else if (ch == '+' || ch == '-')\n                inputType = SIGN;\n            else if (isdigit(ch))\n                inputType = DIGIT;\n            else if (ch == '.')\n                inputType = DOT;\n            else if (ch == 'e' || ch == 'E')\n                inputType = EXPONENT;\n\n            // Get next state from current state and input symbol\n            state = transitionTable[state][inputType];\n\n            // Invalid input\n            if (state == -1) return false;\n        }\n        // If the current state belongs to one of the accepting (final) states,\n        // then the number is valid\n        return state == 1 || state == 4 || state == 7 || state == 8;\n\n    }\n};\n"})})}),(0,s.jsx)(l.A,{value:"python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# Valid Number\n# finite automata\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nfrom enum import Enum\n\nclass InputType(Enum):\n    INVALID = 0\n    SPACE = 1\n    SIGN = 2\n    DIGIT = 3\n    DOT = 4\n    EXPONENT = 5\n    NUM_INPUTS = 6\n\ndef isNumber(s: str) -> bool:\n    transition_table = [\n        [-1, 0, 3, 1, 2, -1], # next states for state 0\n        [-1, 8, -1, 1, 4, 5], # next states for state 1\n        [-1, -1, -1, 4, -1, -1], # next states for state 2\n        [-1, -1, -1, 1, 2, -1], # next states for state 3\n        [-1, 8, -1, 4, -1, 5], # next states for state 4\n        [-1, -1, 6, 7, -1, -1], # next states for state 5\n        [-1, -1, -1, 7, -1, -1], # next states for state 6\n        [-1, 8, -1, 7, -1, -1], # next states for state 7\n        [-1, 8, -1, -1, -1, -1] # next states for state 8\n    ]\n\n    state = 0\n    for ch in s:\n        input_type = InputType.INVALID\n\n        if ch.isspace():\n            input_type = InputType.SPACE\n        elif ch in ['+', '-']:\n            input_type = InputType.SIGN\n        elif ch.isdigit():\n            input_type = InputType.DIGIT\n        elif ch == '.':\n            input_type = InputType.DOT\n        elif ch in ['e', 'E']:\n            input_type = InputType.EXPONENT\n\n        # Get next state from current state and input symbol\n        state = transition_table[state][input_type.value]\n\n        # Invalid input\n        if state == -1:\n            return False\n\n    # If the current state belongs to one of the accepting (final) states,\n    # then the number is valid\n    return state in [1, 4, 7, 8]\n"})})})]})]})}function f(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var a=n(34164);const s={tabItem:"tabItem_Ymn6"};var r=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>g});var a=n(96540),s=n(34164),r=n(23104),i=n(56347),l=n(205),u=n(57485),o=n(31682),c=n(70679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}(n);return function(e){const t=(0,o.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})}),[r,s])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=d(e),[i,u]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[o,p]=h({queryString:n,groupId:s}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,c.Dv)(n);return[s,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:s}),I=(()=>{const e=o??m;return f({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{I&&u(I)}),[I]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);u(e),p(e),b(e)}),[p,b,r]),tabValues:r}}var b=n(92303);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function x(e){let{className:t,block:n,selectedValue:a,selectValue:i,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const t=e.currentTarget,n=u.indexOf(t),s=l[n].value;s!==a&&(o(t),i(s))},p=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>u.push(e),onKeyDown:p,onClick:c,...r,className:(0,s.A)("tabs__item",I.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function T(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,s.A)("tabs-container",I.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(y,{...t,...e})]})}function g(e){const t=(0,b.A)();return(0,v.jsx)(T,{...e,children:p(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);