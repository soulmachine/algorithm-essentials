"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[4776],{61577:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"number-theory/super-ugly-number","title":"Super Ugly Number","description":"\u63cf\u8ff0","source":"@site/docs/number-theory/super-ugly-number.md","sourceDirName":"number-theory","slug":"/number-theory/super-ugly-number","permalink":"/number-theory/super-ugly-number","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Super Ugly Number"},"sidebar":"docs","previous":{"title":"Ugly Number II","permalink":"/number-theory/ugly-number-ii"},"next":{"title":"Fraction to Recurring Decimal","permalink":"/number-theory/fraction-to-recurring-decimal"}}');var s=r(74848),t=r(28453);const l={title:"Super Ugly Number"},o=void 0,u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,s.jsxs)(n.p,{children:["Write a function to find the ",(0,s.jsx)(n.code,{children:"n"}),"-th super ugly number."]}),"\n",(0,s.jsxs)(n.p,{children:["Super ugly numbers are positive numbers whose all prime factors are in the given prime list ",(0,s.jsx)(n.code,{children:"primes"})," of size ",(0,s.jsx)(n.code,{children:"k"}),". For example, ",(0,s.jsx)(n.code,{children:"[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]"})," is the sequence of the first 12 super ugly numbers given ",(0,s.jsx)(n.code,{children:"primes = [2, 7, 13, 19]"})," of size 4."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["1 is a super ugly number for any given ",(0,s.jsx)(n.code,{children:"primes"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The given numbers in ",(0,s.jsx)(n.code,{children:"primes"})," are in ascending order."]}),"\n",(0,s.jsxs)(n.li,{children:["0 < ",(0,s.jsx)(n.code,{children:"k"})," \u2264 100, 0 < ",(0,s.jsx)(n.code,{children:"n"})," \u2264 1000000, 0 < ",(0,s.jsx)(n.code,{children:"primes[i]"})," < 1000."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,s.jsxs)(n.p,{children:["\u8fd9\u9898\u662f ",(0,s.jsx)(n.a,{href:"/number-theory/ugly-number-ii",children:"Ugly Number II"}),' \u7684\u6269\u5c55\u3002\u5728"Ugly Number II"\u4e2d\uff0c',(0,s.jsx)(n.code,{children:"primes=[2,3,5]"}),"\uff0c\u8fd9\u9898\u4e2d",(0,s.jsx)(n.code,{children:"primes"}),"\u53ef\u4ee5\u81ea\u7531\u53d8\u5316\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:['\u6240\u4ee5\u8fd9\u9898\u53ef\u4ee5\u7528"Ugly Number II"\u7684\u601d\u8def\u89e3\u51b3\u3002\u6bcf\u6b21\u8981\u4ece\u591a\u4e2a\u5217\u8868\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a',(0,s.jsx)(n.code,{children:"primes"}),"\u957f\u5ea6\u7684\u5c0f\u6839\u5806\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Super Ugly Number\n// Time complexity: O(n), Space complexity: O(n)\npublic class Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        final int[] nums = new int[n];\n        nums[0] = 1; // 1 is the first ugly number\n        final Queue<Node> q = new PriorityQueue<>();\n        for (int i = 0; i < primes.length; ++i) {\n            q.add(new Node(0, primes[i], primes[i]));\n        }\n\n        for (int i = 1; i < n; ++i) {\n            // get the min element and add to nums\n            Node node = q.peek();\n            nums[i] = node.val;\n\n            // update top elements\n            do {\n                node = q.poll();\n                node.val = nums[++node.index] * node.prime;\n                q.add(node); // push it back\n                // prevent duplicate\n            } while (!q.isEmpty() && q.peek().val == nums[i]);\n        }\n        return nums[n - 1];\n    }\n    static class Node implements Comparable<Node> {\n        private int index;\n        private int val;\n        private int prime;\n\n        public Node(int index, int val, int prime) {\n            this.index = index;\n            this.val = val;\n            this.prime = prime;\n        }\n        public int compareTo(Node other) {\n            return this.val - other.val;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/number-theory/ugly-number-ii",children:"Ugly Number II"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);