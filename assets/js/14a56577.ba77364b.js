"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1843],{61591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"binary-tree/bst/convert-sorted-list-to-binary-search-tree","title":"Convert Sorted List to Binary Search Tree","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/bst/convert-sorted-list-to-binary-search-tree.md","sourceDirName":"binary-tree/bst","slug":"/binary-tree/bst/convert-sorted-list-to-binary-search-tree","permalink":"/binary-tree/bst/convert-sorted-list-to-binary-search-tree","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Convert Sorted List to Binary Search Tree"},"sidebar":"docs","previous":{"title":"Convert Sorted Array to Binary Search Tree","permalink":"/binary-tree/bst/convert-sorted-array-to-binary-search-tree"},"next":{"title":"LCA of BST","permalink":"/binary-tree/bst/lca-of-bst"}}');var a=t(74848),o=t(28453),l=t(11470),s=t(19365);const i={title:"Convert Sorted List to Binary Search Tree"},d=void 0,u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b",id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b",level:3},{value:"\u81ea\u5e95\u5411\u4e0a",id:"\u81ea\u5e95\u5411\u4e0a",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,a.jsx)(n.p,{children:"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST."}),"\n",(0,a.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,a.jsx)(n.p,{children:"\u8fd9\u9898\u4e0e\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u5355\u94fe\u8868\u4e0d\u80fd\u968f\u673a\u8bbf\u95ee\uff0c\u800c\u81ea\u9876\u5411\u4e0b\u7684\u4e8c\u5206\u6cd5\u5fc5\u987b\u9700\u8981 RandomAccessIterator\uff0c\u56e0\u6b64\u524d\u9762\u7684\u65b9\u6cd5\u4e0d\u9002\u7528\u672c\u9898\u3002"}),"\n",(0,a.jsxs)(n.p,{children:["\u5b58\u5728\u4e00\u79cd\u81ea\u5e95\u5411\u4e0a(bottom-up)\u7684\u65b9\u6cd5\uff0c\u89c1 ",(0,a.jsx)(n.a,{href:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html",children:"http://leetcode.com/2010/11/convert-sorted-list-to-balanced-binary.html"})]}),"\n",(0,a.jsx)(n.h3,{id:"\u5206\u6cbb\u6cd5\u81ea\u9876\u5411\u4e0b",children:"\u5206\u6cbb\u6cd5\uff0c\u81ea\u9876\u5411\u4e0b"}),"\n",(0,a.jsxs)(n.p,{children:["\u5206\u6cbb\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\u81ea\u9876\u5411\u4e0b\uff0c\u590d\u6742\u5ea6 ",(0,a.jsx)(n.code,{children:"O(nlogn)"}),"\u3002"]}),"\n","\n",(0,a.jsxs)(l.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,a.jsx)(s.A,{value:"java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\n    public TreeNode sortedListToBST (ListNode head) {\n        if(head == null) return null;\n        if(head.next == null) return new TreeNode(head.val);\n\n        ListNode mid = cutAtMiddle(head);\n\n        TreeNode root = new TreeNode(mid.val);\n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(mid.next);\n\n        return root;\n    }\n\n    ListNode cutAtMiddle(ListNode head) {\n        if(head == null) return null;\n\n        ListNode fast = head;\n        ListNode slow = head;\n        ListNode prev_slow = head;\n\n        while(fast != null && fast.next != null){\n            prev_slow = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        prev_slow.next = null;\n        return slow;\n    }\n}\n"})})}),(0,a.jsx)(s.A,{value:"cpp",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"// Convert Sorted List to Binary Search Tree\n// \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n// \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode* sortedListToBST (ListNode* head) {\n        if(head == nullptr) return nullptr;\n        if(head->next == nullptr) return new TreeNode(head->val);\n\n        ListNode *mid = cutAtMiddle(head);\n\n        TreeNode *root = new TreeNode(mid->val);\n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(mid->next);\n\n        return root;\n    }\n\n    ListNode* cutAtMiddle(ListNode *head) {\n        if(head == nullptr) return nullptr;\n\n        ListNode *fast = head;\n        ListNode *slow = head;\n        ListNode *prev_slow = head;\n\n        while(fast != nullptr && fast->next != nullptr){\n            prev_slow = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        prev_slow->next = nullptr;\n        return slow;\n    }\n};\n"})})}),(0,a.jsx)(s.A,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Convert Sorted List to Binary Search Tree\n# \u4e8c\u5206\u6cd5\uff0c\u7c7b\u4f3c\u4e8e Convert Sorted Array to Binary Search Tree\uff0c\n# \u81ea\u9876\u5411\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution:\n    def sortedListToBST(self, head: ListNode) -> TreeNode:\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n\n        mid = self.cutAtMiddle(head)\n\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n\n        return root\n\n    def cutAtMiddle(self, head: ListNode) -> ListNode:\n        if not head:\n            return None\n\n        fast = head\n        slow = head\n        prev_slow = head\n\n        while fast and fast.next:\n            prev_slow = slow\n            slow = slow.next\n            fast = fast.next.next\n\n        prev_slow.next = None\n        return slow\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"\u81ea\u5e95\u5411\u4e0a",children:"\u81ea\u5e95\u5411\u4e0a"}),"\n",(0,a.jsxs)(l.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,a.jsx)(s.A,{value:"java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        int len = 0;\n        ListNode p = head;\n        while (p != null) {\n            len++;\n            p = p.next;\n        }\n        return sortedListToBST(new Container(head), 0, len - 1);\n    }\n    private static TreeNode sortedListToBST(Container list, int start, int end) {\n        if (start > end) return null;\n\n        int mid = start + (end - start) / 2;\n        TreeNode leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode parent = new TreeNode(list.p.val);\n        parent.left = leftChild;\n        list.p = list.p.next;\n        parent.right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n    // \u6a21\u62df\u4e8c\u7ea7\u6307\u9488\n    static class Container {\n        ListNode p;\n        public Container(ListNode p) {\n            this.p = p;\n        }\n    }\n}\n"})})}),(0,a.jsx)(s.A,{value:"cpp",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"// Convert Sorted List to Binary Search Tree\n// bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    TreeNode *sortedListToBST(ListNode *head) {\n        int len = 0;\n        ListNode *p = head;\n        while (p) {\n            len++;\n            p = p->next;\n        }\n        return sortedListToBST(head, 0, len - 1);\n    }\nprivate:\n    TreeNode* sortedListToBST(ListNode*& list, int start, int end) {\n        if (start > end) return nullptr;\n\n        int mid = start + (end - start) / 2;\n        TreeNode *leftChild = sortedListToBST(list, start, mid - 1);\n        TreeNode *parent = new TreeNode(list->val);\n        parent->left = leftChild;\n        list = list->next;\n        parent->right = sortedListToBST(list, mid + 1, end);\n        return parent;\n    }\n};\n"})})}),(0,a.jsx)(s.A,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Convert Sorted List to Binary Search Tree\n# bottom-up\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution:\n    def sortedListToBST(self, head):\n        length = 0\n        p = head\n        while p:\n            length += 1\n            p = p.next\n        return self._sortedListToBST(Container(head), 0, length - 1)\n\n    def _sortedListToBST(self, container, start, end):\n        if start > end:\n            return None\n\n        mid = start + (end - start) // 2\n        left_child = self._sortedListToBST(container, start, mid - 1)\n        parent = TreeNode(container.p.val)\n        parent.left = left_child\n        container.p = container.p.next\n        parent.right = self._sortedListToBST(container, mid + 1, end)\n        return parent\n\n# \u6a21\u62df\u4e8c\u7ea7\u6307\u9488\nclass Container:\n    def __init__(self, p):\n        self.p = p\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/binary-tree/bst/convert-sorted-array-to-binary-search-tree",children:"Convert Sorted Array to Binary Search Tree"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var o=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,l),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>N});var r=t(96540),a=t(34164),o=t(23104),l=t(56347),s=t(205),i=t(57485),d=t(31682),u=t(70679);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=h(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[d,c]=f({queryString:t,groupId:a}),[v,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),T=(()=>{const e=d??v;return p({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{T&&i(T)}),[T]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),b(e)}),[c,b,o]),tabValues:o}}var b=t(92303);const T={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=t(74848);function x(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),u=e=>{const n=e.currentTarget,t=i.indexOf(n),a=s[t].value;a!==r&&(d(n),l(a))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>i.push(e),onKeyDown:c,onClick:u,...o,className:(0,a.A)("tabs__item",T.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function S(e){let{lazy:n,children:t,selectedValue:o}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=v(e);return(0,m.jsxs)("div",{className:(0,a.A)("tabs-container",T.tabList),children:[(0,m.jsx)(x,{...n,...e}),(0,m.jsx)(S,{...n,...e})]})}function N(e){const n=(0,b.A)();return(0,m.jsx)(y,{...e,children:c(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const a={},o=r.createContext(a);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);