"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6006],{66047:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>u,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"binary-tree/traversal/populating-next-right-pointers-in-each-node-ii","title":"Populating Next Right Pointers in Each Node II","description":"\u63cf\u8ff0","source":"@site/docs/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii.md","sourceDirName":"binary-tree/traversal","slug":"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii","permalink":"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Populating Next Right Pointers in Each Node II"},"sidebar":"docs","previous":{"title":"Flatten Binary Tree to Linked List","permalink":"/binary-tree/traversal/flatten-binary-tree-to-linked-list"},"next":{"title":"Construct Binary Tree from Preorder and Inorder Traversal","permalink":"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"}}');var o=r(74848),l=r(28453),i=r(11470),a=r(19365);const u={title:"Populating Next Right Pointers in Each Node II"},s=void 0,c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:3},{value:"\u8fed\u4ee3\u7248",id:"\u8fed\u4ee3\u7248",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}];function p(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:'Follow up for problem "Populating Next Right Pointers in Each Node".'}),"\n",(0,o.jsx)(n.p,{children:"What if the given tree could be any binary tree? Would your previous solution still work?"}),"\n",(0,o.jsx)(n.p,{children:"Note: You may only use constant extra space."}),"\n",(0,o.jsx)(n.p,{children:"For example,\nGiven the following binary tree,"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"         1\n       /  \\\n      2    3\n     / \\    \\\n    4   5    7\n"})}),"\n",(0,o.jsx)(n.p,{children:"After calling your function, the tree should look like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\    \\\n    4-> 5 -> 7 -> NULL\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,o.jsx)(n.p,{children:"\u8981\u5904\u7406\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u80fd\u9700\u8981\u6700\u53f3\u8fb9\u7684\u5144\u5f1f\u8282\u70b9\uff0c\u9996\u5148\u60f3\u5230\u7528\u5e7f\u641c\u3002\u4f46\u5e7f\u641c\u4e0d\u662f\u5e38\u6570\u7a7a\u95f4\u7684\uff0c\u672c\u9898\u8981\u6c42\u5e38\u6570\u7a7a\u95f4\u3002"}),"\n",(0,o.jsx)(n.p,{children:"\u6ce8\u610f\uff0c\u8fd9\u9898\u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\uff0c\u4e5f\u53ef\u4ee5\u89e3\u51b3 Populating Next Right Pointers in Each Node I."}),"\n",(0,o.jsx)(n.h3,{id:"\u9012\u5f52\u7248",children:"\u9012\u5f52\u7248"}),"\n","\n",(0,o.jsxs)(i.A,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,o.jsx)(a.A,{value:"java",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        if (root == null) return;\n\n        TreeLinkNode dummy = new TreeLinkNode(-1);\n        for (TreeLinkNode curr = root, prev = dummy;\n                curr != null; curr = curr.next) {\n            if (curr.left != null){\n                prev.next = curr.left;\n                prev = prev.next;\n            }\n            if (curr.right != null){\n                prev.next = curr.right;\n                prev = prev.next;\n            }\n        }\n        connect(dummy.next);\n    }\n}\n"})})}),(0,o.jsx)(a.A,{value:"cpp",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n\n        TreeLinkNode dummy(-1);\n        for (TreeLinkNode *curr = root, *prev = &dummy;\n                curr; curr = curr->next) {\n            if (curr->left != nullptr){\n                prev->next = curr->left;\n                prev = prev->next;\n            }\n            if (curr->right != nullptr){\n                prev->next = curr->right;\n                prev = prev->next;\n            }\n        }\n        connect(dummy.next);\n    }\n};\n"})})}),(0,o.jsx)(a.A,{value:"python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Populating Next Right Pointers in Each Node II\n# \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution:\n    def connect(self, root):\n        if not root:\n            return\n\n        dummy = TreeLinkNode(-1)\n        curr, prev = root, dummy\n        while curr:\n            if curr.left:\n                prev.next = curr.left\n                prev = prev.next\n            if curr.right:\n                prev.next = curr.right\n                prev = prev.next\n            curr = curr.next\n        self.connect(dummy.next)\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"\u8fed\u4ee3\u7248",children:"\u8fed\u4ee3\u7248"}),"\n",(0,o.jsxs)(i.A,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],children:[(0,o.jsx)(a.A,{value:"java",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        while (root!= null ) {\n            TreeLinkNode next = null; // the first node of next level\n            TreeLinkNode prev = null; // previous node on the same level\n            for (; root != null; root = root.next) {\n                if (next == null) next = root.left != null ? root.left : root.right;\n\n                if (root.left != null) {\n                    if (prev != null) prev.next = root.left;\n                    prev = root.left;\n                }\n                if (root.right != null) {\n                    if (prev != null) prev.next = root.right;\n                    prev = root.right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n}\n"})})}),(0,o.jsx)(a.A,{value:"cpp",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        while (root) {\n            TreeLinkNode * next = nullptr; // the first node of next level\n            TreeLinkNode * prev = nullptr; // previous node on the same level\n            for (; root; root = root->next) {\n                if (!next) next = root->left ? root->left : root->right;\n\n                if (root->left) {\n                    if (prev) prev->next = root->left;\n                    prev = root->left;\n                }\n                if (root->right) {\n                    if (prev) prev->next = root->right;\n                    prev = root->right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n};\n"})})}),(0,o.jsx)(a.A,{value:"python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Populating Next Right Pointers in Each Node II\n# \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\ndef connect(root):\n    while root:\n        next = None  # the first node of next level\n        prev = None  # previous node on the same level\n        while root:\n            if not next:\n                next = root.left if root.left else root.right\n            if root.left:\n                if prev:\n                    prev.next = root.left\n                prev = root.left\n            if root.right:\n                if prev:\n                    prev.next = root.right\n                prev = root.right\n            root = root.next\n        root = next  # turn to next level\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"\u76f8\u5173\u9898\u76ee",children:"\u76f8\u5173\u9898\u76ee"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/binary-tree/recursion/populating-next-right-pointers-in-each-node",children:"Populating Next Right Pointers in Each Node"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>i});r(96540);var t=r(34164);const o={tabItem:"tabItem_Ymn6"};var l=r(74848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,i),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>j});var t=r(96540),o=r(34164),l=r(23104),i=r(56347),a=r(205),u=r(57485),s=r(31682),c=r(70679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:o}}=e;return{value:n,label:r,attributes:t,default:o}}))}(r);return function(e){const n=(0,s.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function v(e){let{queryString:n=!1,groupId:r}=e;const o=(0,i.W6)(),l=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,u.aZ)(l),(0,t.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(o.location.search);n.set(l,e),o.replace({...o.location,search:n.toString()})}),[l,o])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,l=p(e),[i,u]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[s,d]=v({queryString:r,groupId:o}),[f,x]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,l]=(0,c.Dv)(r);return[o,(0,t.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:o}),g=(()=>{const e=s??f;return h({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{g&&u(g)}),[g]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);u(e),d(e),x(e)}),[d,x,l]),tabValues:l}}var x=r(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=r(74848);function b(e){let{className:n,block:r,selectedValue:t,selectValue:i,tabValues:a}=e;const u=[],{blockElementScrollPositionUntilNextRender:s}=(0,l.a_)(),c=e=>{const n=e.currentTarget,r=u.indexOf(n),o=a[r].value;o!==t&&(s(n),i(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;n=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;n=u[r]??u[u.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:l}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>u.push(e),onKeyDown:d,onClick:c,...l,className:(0,o.A)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function N(e){let{lazy:n,children:r,selectedValue:l}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function y(e){const n=f(e);return(0,m.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,m.jsx)(b,{...n,...e}),(0,m.jsx)(N,{...n,...e})]})}function j(e){const n=(0,x.A)();return(0,m.jsx)(y,{...e,children:d(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const o={},l=t.createContext(o);function i(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);